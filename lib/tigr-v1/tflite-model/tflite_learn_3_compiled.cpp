/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 06.12.2024 00:40:58

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 170176;
#else
constexpr int kTensorArenaSize = 169152;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,80,80,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 24181, -32979, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00020087124721612781, 0.00013859511818736792, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 43,-36,-26,55,5,19,-30,39,99,-6,-46,-26,-23,33,-24,-4,96,-67,-22,-52,47,17,49,-43,-20,-23,88,127,17,-12,65,27, 
  /* [1][0][][] */ 34,65,60,-43,-52,58,0,13,-36,0,35,90,86,37,47,6,-29,6,-33,-66,-56,30,16,89,78,65,-89,-47,66,-76,-127,-4, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0064984047785401344, 0.0044837039895355701, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -789, 243, 219, -572, -395, 365, -942, 412, 144, -714, 161, 314, 159, 348, 91, -784, 26, -1112, -411, -772, -789, 217, -920, 261, -36, -129, 1147, 1928, -701, -491, 2076, -923, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.2889892685925588e-05, 5.697587039321661e-05, 5.8093293773708865e-05, 5.9137819334864616e-05, 6.2476778111886233e-05, 5.2518968004733324e-05, 5.8649617130868137e-05, 6.292855687206611e-05, 8.7238280684687197e-05, 0.00010738304990809411, 6.5628817537799478e-05, 6.0003196267643943e-05, 5.5231997976079583e-05, 6.2983614043332636e-05, 6.4658088376745582e-05, 6.0125083109596744e-05, 6.2628758314531296e-05, 9.8254044132772833e-05, 0.0001797559525584802, 5.3565046982839704e-05, 5.6835513532860205e-05, 6.0346155805746093e-05, 5.7558321714168414e-05, 5.0606126023922116e-05, 6.2164886912796646e-05, 6.7852859501726925e-05, 0.00012258886999916285, 0.00011734118743333966, 6.248166027944535e-05, 6.058252984075807e-05, 8.2047299656551331e-05, 5.8894416724797338e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -58,-58,85,-9,88,-33,-90,-120,61,-101,-111,-12,38,1,-50,51,-65,-51,-73,-75,-72,-123,-17,90,-117,0,56,-50,102,-4,-28,-92,63,-72,-114,45,-127,-91,-95,26,67,-95,-118,81,50,-119,108,-37, 
  /* [1][0][][] */ -61,47,-47,11,-19,90,55,16,89,-105,-91,100,70,-34,37,85,66,-45,44,127,-34,0,30,47,71,34,-57,116,26,17,85,-49,23,117,-5,25,57,72,-16,-82,-47,40,-26,-93,-42,18,-51,-107, 
  /* [2][0][][] */ 34,49,-37,99,-3,-41,100,93,-79,69,-27,107,91,-24,89,-80,-91,-32,41,65,-79,-10,97,40,14,90,71,23,-47,85,64,98,-103,0,-82,-101,-72,101,94,-46,-97,-38,7,-13,-87,90,-46,-127, 
  /* [3][0][][] */ 60,-7,22,-34,-77,36,-113,25,39,15,52,-10,71,80,56,-2,127,79,-59,2,93,-91,-70,-118,-31,-113,-85,87,28,-99,71,-3,-34,-42,-29,-22,-97,-34,25,33,-36,-95,-97,6,59,16,-44,-86, 
  /* [4][0][][] */ 35,73,-25,28,-42,-29,9,13,50,68,-19,55,42,-34,-27,-88,13,0,-71,-5,88,-81,67,-4,-12,-3,76,-60,-49,30,-48,-52,127,78,32,-100,-45,-32,-78,53,-42,-93,-76,-52,18,109,27,84, 
  /* [5][0][][] */ 88,-82,98,99,57,-104,46,65,115,-127,4,-64,34,92,50,57,3,56,-64,115,43,60,17,-5,-70,-45,-34,-79,66,42,9,-88,-65,20,-63,16,-104,-23,46,6,-76,-24,38,105,-46,9,19,-113, 
  /* [6][0][][] */ -2,-58,84,49,-96,-75,-20,41,-29,-87,-10,-99,60,32,86,-124,23,-15,-15,73,-87,-127,79,34,-72,-91,-37,-69,-44,-118,28,-87,-108,-127,-59,-113,-27,18,-114,55,61,31,3,-50,-116,79,-78,-57, 
  /* [7][0][][] */ 92,42,-20,-26,-58,98,-8,6,85,-12,-88,17,56,-81,47,66,23,16,4,105,51,39,2,87,-54,96,30,47,-56,91,-23,36,7,28,67,88,-78,81,-9,-31,90,-65,76,72,32,-11,69,-127, 
  /* [8][0][][] */ 4,38,-32,-43,32,-1,-61,-28,-16,57,37,67,-12,-13,-62,-56,-37,67,-46,0,12,-9,69,52,-105,51,43,35,-59,-6,-36,65,95,0,23,9,76,3,2,71,46,35,-68,-74,-1,-14,7,127, 
  /* [9][0][][] */ -5,-11,44,5,26,-67,-42,38,20,81,-10,14,-28,-30,-61,-14,34,-12,-55,-51,-17,33,-70,-76,64,-16,39,14,-27,-45,-58,34,127,-19,-3,-19,-51,-6,-30,-14,8,-30,17,8,35,79,-30,13, 
  /* [10][0][][] */ -58,85,93,-44,3,98,105,30,47,17,27,-56,86,59,-14,31,-79,58,-69,-37,-6,26,41,-38,64,59,-122,-78,-27,77,-83,-54,40,98,96,56,-27,18,-32,6,-19,127,-97,-30,-88,-66,-24,-100, 
  /* [11][0][][] */ 92,26,6,107,122,54,66,36,110,75,-63,104,3,-81,39,-36,-78,-94,67,51,39,74,21,-77,-60,-66,-25,76,87,6,19,-5,-94,-45,52,40,-45,81,-26,-67,-11,123,-69,10,-44,-66,-96,-127, 
  /* [12][0][][] */ 4,68,-36,7,99,16,-15,47,-58,48,-23,12,-38,-2,62,-56,-127,-39,-32,-63,37,-8,10,116,-25,-35,64,-97,104,29,-42,126,-121,-55,-43,8,0,-62,-26,17,120,71,-113,-43,-36,-103,-70,49, 
  /* [13][0][][] */ 88,-50,103,94,91,106,83,63,63,-97,12,-20,87,55,68,-26,-127,-61,-51,38,66,-15,102,-22,-33,48,-8,24,-60,-68,64,42,5,102,-10,33,-61,-14,21,45,-43,84,-44,14,-44,13,-20,-68, 
  /* [14][0][][] */ -57,-58,95,86,75,5,9,-104,-82,-49,66,61,-32,-72,-67,-44,-42,-69,4,43,-39,29,-4,78,-80,-51,-47,44,-78,-99,-88,29,74,15,-37,6,84,112,2,-119,-9,-49,27,64,44,-113,27,-127, 
  /* [15][0][][] */ 8,-20,-27,60,58,-87,30,-116,-8,-13,-73,-14,39,-17,-102,-122,88,-9,-98,7,8,-1,58,77,12,33,35,54,-18,6,27,-119,-31,1,-99,-21,-70,88,58,-116,-17,71,-58,-1,9,-92,-66,-127, 
  /* [16][0][][] */ -49,-7,76,-60,23,80,-64,30,14,45,-94,66,-20,-34,-55,-74,127,82,53,42,86,70,-16,27,-81,33,-24,37,-103,-6,48,2,-41,50,46,56,-30,38,-37,-37,14,-76,67,94,60,102,107,54, 
  /* [17][0][][] */ -1,2,28,43,7,-37,-12,-59,88,-58,68,11,35,6,-51,74,-53,-4,61,73,-47,-30,-28,-9,80,56,-65,46,65,-11,-26,56,-33,7,-27,-35,-45,66,-75,-46,-54,46,-57,-39,-18,-37,19,-127, 
  /* [18][0][][] */ -32,41,24,-25,-9,-44,-34,-7,-4,16,-44,-26,-23,5,8,26,38,-18,8,-16,23,-23,-2,-32,5,-32,127,23,-1,2,-2,6,94,-11,-45,-39,-20,4,-11,14,-19,-10,-22,71,-45,-6,11,12, 
  /* [19][0][][] */ 3,15,61,25,44,-96,82,77,79,-74,15,-26,-107,19,-69,47,99,-117,95,43,-32,65,-69,0,66,-93,33,-80,-103,-126,-75,33,82,-93,19,-15,-6,-82,-65,-104,31,-127,-96,1,-97,17,99,-107, 
  /* [20][0][][] */ -23,44,48,72,-97,70,2,40,1,1,-96,-13,-23,67,22,-85,-17,-48,-75,-46,7,-57,-86,-83,59,-85,-60,27,5,-2,-51,91,127,25,-29,37,22,-46,-30,-114,-94,-50,-97,-99,-36,-70,-72,85, 
  /* [21][0][][] */ 77,68,78,-82,92,-59,76,15,1,-68,-64,38,8,27,-35,-70,-127,-32,32,-2,98,-40,60,-61,72,-66,-52,71,21,8,-16,-13,-35,27,-80,-104,105,95,-108,-57,0,19,21,-16,-98,-92,-96,34, 
  /* [22][0][][] */ 8,-50,-84,-107,81,-70,92,31,-88,81,-69,-105,84,-104,-115,-81,24,58,-114,-74,64,-87,9,9,86,-4,-127,94,-69,-80,-66,-119,26,43,-5,-10,-3,-20,-72,-108,-2,-22,-20,77,49,-120,83,-38, 
  /* [23][0][][] */ 54,-77,26,75,120,-108,25,-100,73,-105,95,79,27,-127,35,-17,47,-48,-103,123,108,-81,103,-13,25,4,58,37,92,63,64,-28,-74,66,22,31,110,7,-123,-17,-99,37,2,-119,-91,-124,85,-40, 
  /* [24][0][][] */ -65,-75,-98,-95,-79,-100,-57,-62,79,81,53,27,121,27,-25,-127,-97,35,35,-54,97,-74,-59,-21,64,-28,31,42,101,61,-3,-40,-36,-23,52,26,-61,-80,66,-30,-56,-79,88,-28,11,-46,23,43, 
  /* [25][0][][] */ -68,-68,-64,-44,77,-56,-72,54,65,-114,-55,13,73,-25,-72,-69,-93,45,42,-84,66,60,-25,-39,51,-35,-110,16,69,-50,24,105,32,-127,39,47,69,-53,-17,-66,-60,99,-94,-10,65,16,34,-6, 
  /* [26][0][][] */ 59,-41,-6,-5,-46,2,-19,9,-43,-24,63,53,-38,5,14,-27,79,53,-10,-30,18,55,82,-3,-14,19,15,9,-14,8,-3,11,12,-33,-30,-3,-15,46,27,56,-32,12,68,14,6,49,5,127, 
  /* [27][0][][] */ 48,1,-7,-26,-49,-16,-32,11,10,81,41,-21,1,69,58,-32,66,41,57,-23,-24,46,43,-8,-101,21,-27,-3,28,11,24,15,73,39,-10,19,-8,-5,2,59,-21,-25,78,29,88,42,58,127, 
  /* [28][0][][] */ 51,-24,67,25,-118,-81,-91,-77,-33,-118,36,39,-85,-91,-8,53,46,77,-69,56,-40,1,-110,-70,-127,47,-103,-67,-76,-72,-24,-35,-121,-1,49,50,-5,-104,-56,-7,66,29,-84,20,-104,-35,-19,20, 
  /* [29][0][][] */ 31,45,34,-62,-86,-9,-127,2,80,105,-27,-87,77,-45,-57,-16,-85,87,11,-72,-80,-38,45,-5,-43,-2,-1,0,-108,-16,89,-16,110,-12,-78,-54,-14,67,-21,119,35,82,-35,107,-7,94,-30,-17, 
  /* [30][0][][] */ 71,-18,-12,43,-46,44,-34,18,98,36,37,11,-46,60,70,-6,29,79,103,-44,56,-20,-16,15,-100,32,-24,87,-6,-57,-10,38,-10,-38,-39,23,47,18,56,37,90,-71,60,84,121,9,100,127, 
  /* [31][0][][] */ 58,-104,15,73,26,39,-73,-108,-47,-31,-89,-99,72,-127,-62,82,-58,-98,16,26,40,14,-46,78,20,-123,39,16,-85,-85,26,80,24,0,-101,-24,69,-47,-79,-119,36,-82,-45,22,-10,-60,-45,10, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022882577031850815, 0.0024650357663631439, 0.0025133804883807898, 0.0025585715193301439, 0.0027030301280319691, 0.0022722098510712385, 0.0025374495889991522, 0.0027225760277360678, 0.0037743253633379936, 0.0046458798460662365, 0.0028394015971571207, 0.0025960116181522608, 0.0023895879276096821, 0.0027249581180512905, 0.0027974036056548357, 0.0026012849994003773, 0.002709605498239398, 0.0042509175837039948, 0.0077770613133907318, 0.002317467937245965, 0.0024589633103460073, 0.0026108496822416782, 0.0024902352597564459, 0.0021894515957683325, 0.0026895361952483654, 0.0029356239829212427, 0.0053037530742585659, 0.0050767143256962299, 0.0027032413054257631, 0.0026210763026028872, 0.0035497399512678385, 0.0025480408221483231, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 2115, -2444, 3501, 2029, 2311, -248, 1995, 4150, -3010, -1732, -982, 6523, 2744, 3224, 7155, -6455, -2548, 10355, 4989, 4573, 5596, 22177, 23215, 697, -2086, 1366, -1379, -1657, 2160, 2154, 4743, 6530, -407, 142, 5381, 3622, 5722, 2545, 2353, -1166, 3419, -2121, 6264, 95, 465, 2200, -2077, 6437, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00017783306248020381, 0.00018299497605767101, 0.00018950334924738854, 0.00026293433620594442, 0.00021658005425706506, 0.00020217249402776361, 0.0001624469441594556, 0.00017502282571513206, 0.00014713057316839695, 0.00021785218268632889, 0.00024358250084333122, 0.0001182331980089657, 0.00023069325834512711, 0.00018143648048862815, 0.00012543764023575932, 9.4945135060697794e-05, 0.00017488416051492095, 9.8078722658101469e-05, 0.00011660010204650462, 0.00016404692723881453, 0.00013795461563859135, 4.7641442506574094e-05, 4.2729709093691781e-05, 0.00021344982087612152, 0.00021567252406384796, 0.00018302079115528613, 0.00016723103180993348, 0.00015798158710822463, 0.00019927186076529324, 0.00017780793132260442, 0.00013801365275867283, 0.00012520671589300036, 0.00020470260642468929, 0.00034195257467217743, 0.00014055891369935125, 0.00016513581795152277, 0.00013482660870067775, 0.00023449932632502168, 0.00014177028788253665, 0.00023647246416658163, 0.00016495815361849964, 0.00021766929421573877, 0.00014344252122100443, 0.00028458947781473398, 0.00023338664323091507, 0.00024729740107432008, 0.00018469427595846355, 0.00014656543498858809, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -9,18,127,-12,-13,45,11,-76, 
  /* [1][0][][] */ 90,-66,37,-92,-3,-65,127,15, 
  /* [2][0][][] */ 61,44,48,-66,-44,17,127,-29, 
  /* [3][0][][] */ 32,34,20,-16,9,-58,127,8, 
  /* [4][0][][] */ 127,-27,-40,-25,-108,-80,-21,66, 
  /* [5][0][][] */ 20,65,127,-7,41,-20,31,-59, 
  /* [6][0][][] */ 117,127,-16,121,-98,8,24,113, 
  /* [7][0][][] */ -29,-9,7,22,27,-92,-127,-28, 
  /* [8][0][][] */ 91,59,-18,71,-61,26,-127,-47, 
  /* [9][0][][] */ 127,-38,-46,49,7,-12,11,-89, 
  /* [10][0][][] */ 67,15,11,39,-32,127,18,-3, 
  /* [11][0][][] */ 127,-20,9,-116,74,-61,-48,71, 
  /* [12][0][][] */ -44,120,83,-29,0,49,-85,127, 
  /* [13][0][][] */ 75,-14,-101,25,33,-40,1,-127, 
  /* [14][0][][] */ 99,34,8,-11,-127,24,-68,-15, 
  /* [15][0][][] */ 31,2,-109,-45,-110,-89,78,127, 
  /* [16][0][][] */ 38,23,127,9,118,-78,-34,-44, 
  /* [17][0][][] */ 6,-37,67,-18,127,-17,-36,-12, 
  /* [18][0][][] */ 118,-89,127,57,-19,79,-38,-20, 
  /* [19][0][][] */ 92,52,60,-62,-52,-127,34,-32, 
  /* [20][0][][] */ 28,-51,77,127,5,-69,-115,96, 
  /* [21][0][][] */ 84,-21,-75,-127,55,-50,10,100, 
  /* [22][0][][] */ -49,-127,-54,-56,35,-43,121,-57, 
  /* [23][0][][] */ -23,8,17,-47,-94,-127,14,-34, 
  /* [24][0][][] */ 113,3,50,46,-12,-35,-127,81, 
  /* [25][0][][] */ 79,9,-41,-85,10,23,-21,127, 
  /* [26][0][][] */ -83,-42,14,-127,110,6,-19,-88, 
  /* [27][0][][] */ 121,127,17,-50,21,106,10,-23, 
  /* [28][0][][] */ 27,127,12,22,-24,-52,-42,101, 
  /* [29][0][][] */ 88,30,101,109,38,-47,-127,63, 
  /* [30][0][][] */ 127,-90,-66,104,41,-4,-80,93, 
  /* [31][0][][] */ 94,-92,22,45,-69,-77,-127,24, 
  /* [32][0][][] */ -114,-95,-4,-127,79,-54,-4,-37, 
  /* [33][0][][] */ 33,15,16,18,19,-47,127,21, 
  /* [34][0][][] */ -56,64,90,-76,116,-56,-127,66, 
  /* [35][0][][] */ -68,32,40,127,-17,114,28,-16, 
  /* [36][0][][] */ 90,19,-36,-127,53,3,12,32, 
  /* [37][0][][] */ 50,56,-1,11,-92,127,95,45, 
  /* [38][0][][] */ -14,-127,47,112,43,98,2,120, 
  /* [39][0][][] */ 1,-2,-127,38,1,-35,-13,65, 
  /* [40][0][][] */ 67,1,-112,-5,-35,72,-58,127, 
  /* [41][0][][] */ 62,2,37,-36,-127,-119,-9,-3, 
  /* [42][0][][] */ -86,38,-127,82,1,111,-8,-124, 
  /* [43][0][][] */ -26,17,-50,-127,-10,14,-12,-84, 
  /* [44][0][][] */ 69,9,5,51,23,127,-27,3, 
  /* [45][0][][] */ -1,69,-43,10,127,-21,-48,-23, 
  /* [46][0][][] */ 77,-74,12,127,77,66,-24,51, 
  /* [47][0][][] */ -38,-127,62,-20,79,19,34,28, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.002245030365884304, 0.0023101961705833673, 0.0023923602420836687, 0.0033193803392350674, 0.0027341865934431553, 0.002552300225943327, 0.002050790237262845, 0.0022095527965575457, 0.0018574307905510068, 0.0027502465527504683, 0.0030750755686312914, 0.0014926196308806539, 0.0029123569838702679, 0.0022905212827026844, 0.0015835710801184177, 0.0011986225144937634, 0.0022078023757785559, 0.0012381820706650615, 0.0014720028266310692, 0.0020709889940917492, 0.0017415899783372879, 0.00060144317103549838, 0.00053943565580993891, 0.0026946694124490023, 0.0027227296959608793, 0.0023105221334844828, 0.0021111862733960152, 0.0019944179803133011, 0.002515681553632021, 0.0022447130177170038, 0.0017423353856429458, 0.0015806559240445495, 0.0025842413306236267, 0.0043169357813894749, 0.0017744677606970072, 0.0020847355481237173, 0.001702100969851017, 0.0029604062438011169, 0.0017897605430334806, 0.0029853158630430698, 0.0020824926905333996, 0.0027479375712573528, 0.0018108714139088988, 0.0035927628632634878, 0.0029463593382388353, 0.0031219739466905594, 0.0023316487204283476, 0.0018502962775528431, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -6457, -1013, 11456, -9803, 121, -6132, 9374, 15380, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00016694019723217934, 0.00019051731214858592, 0.0001036676112562418, 7.8389828559011221e-05, 0.00011075991642428562, 0.00013575107732322067, 0.00013746714103035629, 0.00014675957208964974, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-11,16,-21,13,59,8,35,124,-83,47,26,-52,85,-1,-65,16,-27,-23,-10,18,-56,-11,-29,-81,-17,-41,-51,-41,90,-49,39,16,-66,12,-43,57,-83,-86,-1,17,-43,-78,-20,63,-57,55,-33, 
  /* [1][0][][] */ 50,14,-4,77,46,76,15,24,80,-75,-9,21,35,40,-43,-25,-32,-41,-71,11,23,-53,40,76,-19,-48,-3,36,-36,69,-61,127,-34,25,-27,-28,-66,-37,-33,-32,-61,-29,-44,24,33,-24,9,-74, 
  /* [2][0][][] */ -42,-11,-79,31,-65,-26,-4,26,-84,-62,-72,-12,-43,65,-127,-25,55,-87,35,-5,66,61,-34,-4,-12,77,13,-97,-58,4,9,7,-20,-18,52,-74,56,-13,27,72,-60,32,34,-37,-76,9,-49,57, 
  /* [3][0][][] */ 26,-41,-13,24,-44,2,-12,62,92,120,-127,-27,15,-12,-51,95,-70,-6,-3,18,-26,16,69,18,9,18,-77,48,-38,39,-43,-23,16,24,24,22,67,-4,43,-2,-63,75,33,24,16,-6,-36,-24, 
  /* [4][0][][] */ -24,-98,36,-69,9,68,-54,-41,-12,-46,76,19,-52,-27,-7,48,55,37,-29,25,-76,-36,127,-17,-81,-32,-8,40,42,-55,-2,64,-20,65,-19,59,-33,79,21,37,-9,41,-33,55,117,80,-3,7, 
  /* [5][0][][] */ -64,-79,77,-127,-19,14,-32,-41,-10,65,-50,55,-69,17,55,27,68,48,61,-2,22,3,-7,-61,52,-79,0,-38,14,-57,42,-75,5,-18,53,9,-26,59,42,69,100,28,17,-8,-13,11,-17,29, 
  /* [6][0][][] */ -85,-18,53,51,-44,-75,-7,-104,-70,10,-125,33,11,-6,63,-26,-29,4,1,127,19,-30,54,82,-77,-7,40,-25,18,-74,-63,-59,-44,70,56,-89,-28,60,24,10,-38,69,70,-81,5,-48,-12,4, 
  /* [7][0][][] */ 33,11,-4,2,8,42,-49,-61,-127,-20,116,36,-5,-30,14,-12,16,47,4,-16,-54,13,-31,-40,29,14,-44,-10,-29,11,-40,-53,-126,-86,-43,-9,79,-61,-44,-16,41,-18,36,-27,25,-61,30,34, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0070949583314359188, 0.0080969855189323425, 0.0044058733619749546, 0.0033315676264464855, 0.0047072963789105415, 0.0057694204151630402, 0.0058423536829650402, 0.0062372814863920212, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -3564, 762, 5984, 3418, -4929, -7587, -9042, 3333, 4727, -3643, -9220, -2561, 506, 14482, 11919, -78, 5194, -2951, 9564, -738, 15348, -1688, -924, -456, 1715, -6098, 1312, -900, 9807, -23169, -3905, -704, 53, -1761, 891, -1407, 13610, -6624, 1662, -17597, -2674, 683, -2094, 927, 1404, -1951, 9789, -3547, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00027140395832248032, 0.00038643751759082079, 0.00012695702025666833, 7.9859390098135918e-05, 0.00018859177362173796, 0.00012373167555779219, 0.00016401214816141874, 0.00018741098756436259, 0.00022231068578548729, 0.00033747177803888917, 0.00031727724126540124, 7.189891766756773e-05, 0.00029631465440616012, 9.2022921307943761e-05, 0.00013328697241377085, 0.00019740872085094452, 0.00014659152657259256, 0.00012851394421886653, 0.00011810880823759362, 0.00032377542811445892, 7.8677076089661568e-05, 0.00017060749814845622, 0.00024220923660323024, 0.00020350510021671653, 0.00019731870270334184, 0.00020747625967487693, 0.00027455698000267148, 0.00033933311351574957, 0.00012216047616675496, 0.00012296909699216485, 0.00015676770999561995, 0.00016949886048678309, 0.00015335905482061207, 0.00048782423255033791, 8.7474676547572017e-05, 0.00019293637888040394, 0.00012531058746390045, 0.00010814690904226154, 0.00016845451318658888, 6.9755122240167111e-05, 0.00045227725058794022, 0.00021662734798155725, 0.00021582259796559811, 0.00020098307868465781, 0.00014822983939666301, 0.00015311181778088212, 0.00012435585085768253, 0.00011905041901627555, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 86,35,39,62,9,6,-9,76,37,-9,65,6,43,-127,-65,30,71,-1,-97,-1,110,-12,-17,-21,98,13,-4,-5,-65,56,-9,-71,62,9,110,-1,-48,74,127,94,-41,98,-123,-42,52,-98,-34,4, 113,127,-120,127,49,57,-53,-127,51,71,127,-15,-40,-51,-9,-24,-46,89,-127,-6,111,84,36,-27,52,-5,19,127,-127,89,-75,-127,2,-54,31,46,-79,127,62,100,-127,-57,88,-5,24,1,-127,101, 62,1,11,52,15,52,23,62,31,14,51,-8,-16,-83,-27,-13,81,16,-92,-3,58,-12,-17,69,48,44,-15,20,-15,68,-44,-37,127,26,127,12,-43,96,94,73,-39,52,43,82,39,107,40,-20, 
  /* [0][1][][] */ -17,-39,-30,110,34,67,108,32,8,49,-27,127,112,-7,-34,-75,-14,110,89,-22,-120,-14,26,-101,35,74,7,16,-49,127,14,48,9,127,14,16,-95,-5,3,58,53,4,89,-127,14,-70,-41,127, 55,-62,-57,-116,127,20,127,-96,-127,127,27,19,-127,124,127,-70,-127,30,34,127,5,-35,127,-11,-127,127,42,-60,-91,68,-127,114,38,-98,-12,127,127,62,27,127,70,-83,-17,-13,94,-13,-51,82, -22,-36,-86,93,-8,127,91,25,20,38,-19,62,-50,-69,-46,-8,-34,127,92,-31,-127,-10,-58,127,4,16,5,14,-13,68,58,42,-19,-10,-70,-18,-48,5,45,-6,67,87,-27,108,-4,127,-66,80, 
  /* [0][2][][] */ -41,-2,7,13,7,5,-7,10,35,-43,19,-3,38,-105,-73,73,71,-13,7,11,-69,66,-36,-22,-2,-12,-24,-16,19,0,61,0,56,24,97,26,-24,65,20,105,37,74,120,-32,-38,-86,-27,-10, -127,-15,-127,5,-84,-6,-64,-14,29,56,-85,-18,2,-2,-20,127,-68,-16,-102,-52,-75,127,-27,-56,0,61,-127,-55,-90,69,109,21,-9,-29,-13,53,-18,41,-48,67,-31,-127,-127,-35,-127,19,-119,90, -32,-16,6,31,16,-8,12,30,22,-63,9,-15,8,-67,-50,33,77,-84,80,-1,-96,36,-16,11,21,-34,-2,-22,-62,0,49,32,-21,32,90,29,-6,29,42,-4,34,79,-84,51,-18,35,6,-101, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.011534668505191803, 0.016423594206571579, 0.0053956732153892517, 0.0033940239809453487, 0.0080151502043008804, 0.0052585960365831852, 0.0069705164059996605, 0.0079649668186903, 0.0094482041895389557, 0.014342550188302994, 0.013484282419085503, 0.0030557040590792894, 0.012593372724950314, 0.003910974133759737, 0.0056646964512765408, 0.0083898706361651421, 0.0062301396392285824, 0.0054618422873318195, 0.0050196242518723011, 0.013760454952716827, 0.0033437756355851889, 0.0072508184239268303, 0.010293892584741116, 0.0086489664390683174, 0.0083860447630286217, 0.0088177407160401344, 0.011668670922517776, 0.014421657659113407, 0.0051918202079832554, 0.0052261864766478539, 0.0066626276820898056, 0.0072037014178931713, 0.0065177595242857933, 0.02073252946138382, 0.003717673709616065, 0.0081997960805892944, 0.0053256996907293797, 0.0045962436124682426, 0.0071593169122934341, 0.0029645925387740135, 0.019221782684326172, 0.0092066619545221329, 0.009172460064291954, 0.008541780523955822, 0.0062997681088745594, 0.0065072523429989815, 0.0052851238287985325, 0.0050596427172422409, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 19217, 3504, -2, 317, 4068, 3676, 7087, 2861, 3963, -4221, 11859, 759, 13305, -25, 3395, 1407, 4565, -114, 3641, 408, 1286, -1104, 2649, 5513, 1397, -2845, 1786, 7813, 1380, 8050, 1149, 7525, 1624, 5555, 83, -1104, 1945, 1049, -1004, 2429, 6348, -2567, 11382, 2618, 1416, 4951, 2469, -1387, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 5.1480947149684653e-05, 0.00017931780894286931, 0.00034460320603102446, 0.00034681285615079105, 0.00018532565445639193, 0.00017191028746310622, 0.00012218618940096349, 0.00026645063189789653, 0.00016226862499024719, 0.00016767576744314283, 8.4261831943877041e-05, 0.00026662781601771712, 7.5443305831868201e-05, 0.0002497397072147578, 0.00017906886932905763, 0.00017886378918774426, 0.00015272523160092533, 0.0003743492707144469, 0.00020691039389930665, 0.00018244564125780016, 0.00033293853630311787, 0.00019258835527580231, 0.00020594234229065478, 0.00015585919027216733, 0.00025021273177117109, 0.00019957192125730217, 0.00024300489167217165, 0.00011089588224422187, 0.00022189038281794637, 0.00011162437294842675, 0.00019230257021263242, 0.00011868248839164153, 0.0002001842949539423, 0.00014790651039220393, 0.00028781293076463044, 0.00035958085209131241, 0.0002773977757897228, 0.00023742465418763459, 0.00022737571271136403, 0.00015184543735813349, 0.00014523522986564785, 0.00015901862934697419, 7.8862343798391521e-05, 0.00016621548274997622, 0.00020273624977562577, 0.00015346241707447916, 0.0002143413876183331, 0.00020460117957554758, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,61,-39,-23,118,39,-43,-75, 
  /* [1][0][][] */ 16,-44,-28,-57,-76,-127,48,23, 
  /* [2][0][][] */ 11,61,-8,-60,-36,36,-18,127, 
  /* [3][0][][] */ 111,65,47,-27,-88,-127,88,-17, 
  /* [4][0][][] */ 5,33,-80,9,-127,41,14,33, 
  /* [5][0][][] */ -26,61,46,-32,-121,-127,-49,-23, 
  /* [6][0][][] */ -63,85,127,-15,-98,2,-28,-50, 
  /* [7][0][][] */ 8,20,38,63,14,-127,-3,10, 
  /* [8][0][][] */ 127,58,-74,67,-112,-49,-74,0, 
  /* [9][0][][] */ 76,-34,-55,-58,1,-41,-33,127, 
  /* [10][0][][] */ -36,20,-29,104,38,102,-2,-127, 
  /* [11][0][][] */ 39,2,47,-34,21,111,127,94, 
  /* [12][0][][] */ -52,-63,-115,-79,127,-1,6,-10, 
  /* [13][0][][] */ -91,-53,17,127,6,-111,34,69, 
  /* [14][0][][] */ 62,127,118,30,54,-63,-96,-22, 
  /* [15][0][][] */ -127,63,123,114,-47,-31,49,-73, 
  /* [16][0][][] */ -110,-34,86,-73,127,39,-47,-19, 
  /* [17][0][][] */ 27,-71,-48,8,-24,127,-43,47, 
  /* [18][0][][] */ -36,127,10,-40,-30,7,89,-42, 
  /* [19][0][][] */ -3,124,122,127,-43,23,17,29, 
  /* [20][0][][] */ -15,-32,55,-127,-29,-20,16,-24, 
  /* [21][0][][] */ -11,66,29,-127,76,-7,90,19, 
  /* [22][0][][] */ 88,-44,-94,61,66,-34,-79,127, 
  /* [23][0][][] */ 15,-66,-127,-32,43,-26,-35,39, 
  /* [24][0][][] */ 16,-26,-60,36,-73,49,-107,127, 
  /* [25][0][][] */ -5,-10,48,18,127,-10,-70,-56, 
  /* [26][0][][] */ 13,127,114,-21,-16,-22,61,-74, 
  /* [27][0][][] */ -29,25,82,-127,48,45,68,-92, 
  /* [28][0][][] */ 83,-13,78,90,95,-18,43,127, 
  /* [29][0][][] */ 31,47,101,12,-59,19,-127,126, 
  /* [30][0][][] */ -80,-62,-127,125,-78,-30,-127,70, 
  /* [31][0][][] */ 15,92,74,-13,-67,74,97,-127, 
  /* [32][0][][] */ 50,-31,14,38,49,127,19,-37, 
  /* [33][0][][] */ 1,-22,-127,22,19,-42,-29,107, 
  /* [34][0][][] */ 30,-34,-6,-127,23,82,-14,-3, 
  /* [35][0][][] */ -27,40,69,-20,11,-127,9,0, 
  /* [36][0][][] */ -17,2,-28,-127,-28,16,-23,-80, 
  /* [37][0][][] */ 50,-27,-49,-63,-67,127,-77,-95, 
  /* [38][0][][] */ 51,-53,-23,75,50,24,2,127, 
  /* [39][0][][] */ 127,87,43,108,-11,105,-40,-34, 
  /* [40][0][][] */ 26,-52,-127,-21,-31,-17,-42,48, 
  /* [41][0][][] */ -6,-86,-127,-112,16,-91,-84,-56, 
  /* [42][0][][] */ -32,-15,125,127,-80,-11,96,112, 
  /* [43][0][][] */ 51,-22,-127,-111,-50,-16,30,104, 
  /* [44][0][][] */ -43,65,127,-115,-107,-10,21,-127, 
  /* [45][0][][] */ -60,15,-123,24,-36,33,3,127, 
  /* [46][0][][] */ 60,-52,-41,-127,29,-3,-59,7, 
  /* [47][0][][] */ 72,-120,127,-79,71,-39,-11,22, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00067659432534128428, 0.0023567050229758024, 0.0045289876870810986, 0.0045580281876027584, 0.0024356639478355646, 0.002259350847452879, 0.0016058461042121053, 0.0035018580965697765, 0.0021326341666281223, 0.0022036982700228691, 0.0011074208887293935, 0.0035041868686676025, 0.00099152233451604843, 0.0032822331413626671, 0.0023534332867711782, 0.0023507380392402411, 0.0020072089973837137, 0.0049199284985661507, 0.0027193438727408648, 0.0023978129029273987, 0.0043756831437349319, 0.0025311147328466177, 0.0027066210750490427, 0.0020483974367380142, 0.0032884499523788691, 0.0026228970382362604, 0.0031937200110405684, 0.0014574619708582759, 0.0029162201099097729, 0.0014670361997559667, 0.0025273587089031935, 0.0015597983729094267, 0.0026309452950954437, 0.0019438783638179302, 0.0037826145999133587, 0.0047258329577744007, 0.0036457325331866741, 0.0031203809194266796, 0.0029883116949349642, 0.0019956461619585752, 0.0019087707623839378, 0.002089920686557889, 0.001036457484588027, 0.0021845062728971243, 0.0026644845493137836, 0.0020168975461274385, 0.0028170065488666296, 0.0026889946311712265, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -9610, -26575, 1701, 6493, -21842, -2765, -20707, 409, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00015220537898130715, 7.1273789217229933e-05, 8.0540659837424755e-05, 6.99906813679263e-05, 7.3109542427118868e-05, 9.4113864179234952e-05, 6.5129468566738069e-05, 0.0001088060816982761, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 67,31,-61,64,30,42,-101,-45,-1,-32,-2,-31,-23,-1,58,-18,24,-14,28,-37,37,-12,41,-29,-3,-17,-27,26,-10,-19,-23,-11,43,18,11,18,127,37,48,-24,16,-37,-11,-40,62,38,15,-61, 
  /* [1][0][][] */ 62,23,10,14,16,69,-14,-51,17,54,-51,-63,127,-19,36,44,8,34,10,-81,116,9,47,21,24,20,72,43,16,-72,41,40,44,86,-8,111,43,1,44,13,74,19,31,14,1,14,116,-75, 
  /* [2][0][][] */ 19,-22,80,127,-79,40,-25,6,2,70,14,-77,-9,82,26,35,-83,-68,55,-9,5,78,5,-86,-12,-27,57,3,-60,19,31,-26,-9,-53,-94,-36,11,27,-84,-24,-22,-52,-46,24,31,-76,-18,7, 
  /* [3][0][][] */ -32,73,-55,0,9,-45,19,57,106,-89,-37,35,9,-23,8,25,3,6,-33,-10,13,33,-71,32,-31,-68,37,-22,56,-23,30,-50,26,-30,-19,-40,-127,-12,-58,4,-46,-50,29,-8,-54,16,-9,1, 
  /* [4][0][][] */ 49,-13,15,-32,-60,69,29,88,-104,-57,87,29,59,-51,-76,-69,121,67,70,-33,0,-121,-13,65,-25,-2,-46,-127,-56,-45,112,47,88,-5,126,83,81,114,18,23,27,28,-40,-18,100,89,60,-25, 
  /* [5][0][][] */ 26,42,-13,53,30,53,-20,-64,-60,17,3,7,-4,50,28,-63,77,59,-23,13,-15,-57,-41,-40,-81,-88,-49,20,-15,41,-11,54,18,-64,74,13,-27,127,-48,-95,-14,-13,-5,-31,-1,14,-59,67, 
  /* [6][0][][] */ 86,33,-1,96,-83,41,-54,62,10,-92,64,84,68,-27,-6,-29,25,34,-51,-7,60,5,-36,-11,8,52,-15,-49,29,-44,35,54,9,-41,-6,87,98,-43,10,-4,-59,71,-81,30,55,86,127,-47, 
  /* [7][0][][] */ 15,33,127,30,-35,89,-81,19,-52,82,-11,-30,55,66,4,-10,-67,-3,-60,0,17,47,-23,-44,-15,63,31,-6,14,-15,9,-15,-94,-8,59,28,74,-29,40,-9,-41,-20,-20,-41,-1,-37,19,39, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0064687286503612995, 0.00302913598716259, 0.0034229778684675694, 0.0029746037907898426, 0.0031071554403752089, 0.0039998390711843967, 0.002768002450466156, 0.0046242582611739635, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 7080, -15348, -1364, 1951, 582, 17038, 5161, -3642, -7681, 1829, -998, -7089, -3910, -8762, 1401, -3315, -1643, 20345, -1133, -4514, 7985, 2555, -1354, -1824, -3448, 1290, -1141, -284, -2504, -1698, 1736, 13948, 10586, 778, -4653, 7483, 255, 13688, 3737, -2688, 31, -9650, -6255, -4243, 668, 9033, 15496, -16521, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00016429866082035005, 0.00010083726374432445, 0.00073265278479084373, 0.00032209008350037038, 0.00024096998095046729, 0.00017311122792307287, 9.8181044450029731e-05, 0.00032412289874628186, 0.00011521858687046915, 0.0003979892935603857, 0.00046849611680954695, 6.1106184148229659e-05, 0.00019943690858781338, 8.3035265561193228e-05, 0.00019814174447674304, 8.1392565334681422e-05, 0.00014564952289219946, 6.0136986576253548e-05, 0.00036423021811060607, 7.4545445386320353e-05, 0.000146478894748725, 0.00032154374639503658, 0.000271183205768466, 0.00016990257427096367, 0.00021058520360384136, 0.00033155453274957836, 0.00024630027473904192, 0.0002494269865565002, 0.0002304791851202026, 0.00026049194275401533, 0.00019439589232206345, 0.00010339360596844926, 0.00011535170779097825, 0.00026879453798756003, 0.00018001197895500809, 0.0002046958397841081, 0.00045563557068817317, 0.0001902602962218225, 0.00016335463442374021, 0.0003548735985532403, 0.00018059155263472348, 0.00012235328904353082, 0.00017390686844009906, 8.0595797044225037e-05, 0.00021578403539024293, 0.00015036921831779182, 0.0001435042213415727, 0.00010372883843956515, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -71,30,24,-5,127,-77,15,35,6,8,58,1,85,14,-69,17,49,-59,-30,74,-10,-16,-28,-8,-24,20,7,-65,-3,127,-40,-98,17,104,123,-48,19,-76,-113,-26,-13,-30,22,-45,5,20,-98,60, 38,94,-6,41,0,-60,127,-6,45,21,88,106,127,127,-45,47,127,-127,-10,127,-7,1,113,-79,-18,60,-82,4,2,-62,127,-60,-127,-76,64,47,-70,-21,-127,31,-76,-46,23,-105,30,-23,-97,101, -15,60,7,-8,58,-3,-8,1,5,27,73,-69,50,-47,-70,65,47,5,-35,11,25,-25,-41,-21,49,4,-5,-102,-23,41,-84,-127,-26,39,127,-48,21,-104,-97,24,-21,22,7,-24,-10,1,-127,82, 
  /* [0][1][][] */ -67,32,-20,-73,-1,-122,4,16,62,16,-6,127,19,105,-30,58,18,-100,24,78,-13,-92,-95,-32,-127,-36,-26,9,-5,24,57,-101,-24,100,-41,-20,50,-75,46,111,-80,59,-28,83,-7,-48,27,40, 51,127,127,127,-56,25,-121,127,127,-127,-50,108,93,96,127,-62,-43,-115,127,56,-127,127,127,0,113,92,87,127,127,-50,33,-17,-42,-127,48,-19,127,127,80,63,-75,125,9,127,127,37,-36,-120, -38,43,-79,-46,-55,-127,22,-20,17,-7,123,66,-13,29,-33,127,27,-87,-16,26,80,-104,-78,-17,67,-57,-60,14,9,16,76,-64,17,-21,-52,-127,38,-95,6,-127,-34,127,127,98,-29,2,-2,127, 
  /* [0][2][][] */ -10,-47,5,-12,-1,-72,72,14,46,33,127,97,-70,53,-15,94,24,-3,-37,-2,-38,-46,-38,44,-9,-6,-66,-20,8,63,23,25,-22,43,-56,2,-39,-11,25,-30,51,-10,8,38,-21,-9,23,34, -127,65,40,24,-71,-112,125,-79,37,22,56,-3,-92,38,24,119,39,97,-4,50,-59,21,69,127,13,-127,127,17,16,-14,-107,-41,-24,-77,-76,-80,-119,-11,19,21,127,29,-19,118,-15,-127,-114,9, -15,10,35,7,5,-64,40,-2,23,23,11,46,-28,18,-5,32,-6,-9,-66,-69,-5,-8,-22,33,10,2,-33,-51,15,-26,-6,53,9,1,20,45,-31,12,40,-5,25,-47,49,50,-24,-14,12,94, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0070137754082679749, 0.0043046604841947556, 0.031276348978281021, 0.013749762438237667, 0.010286811739206314, 0.0073899771086871624, 0.0041912687011063099, 0.013836542144417763, 0.0049185873940587044, 0.01698983833193779, 0.019999716430902481, 0.0026085730642080307, 0.0085137989372014999, 0.0035447077825665474, 0.0084585091099143028, 0.0034745822194963694, 0.0062176594510674477, 0.0025671988260000944, 0.015548691153526306, 0.0031822840683162212, 0.0062530641444027424, 0.013726440258324146, 0.011576589196920395, 0.0072530019097030163, 0.0089897103607654572, 0.014153792522847652, 0.010514357127249241, 0.010647834278643131, 0.0098389685153961182, 0.011120188049972057, 0.0082986019551753998, 0.0044137886725366116, 0.004924270324409008, 0.011474619619548321, 0.007684564683586359, 0.0087382979691028595, 0.019450711086392403, 0.0081220567226409912, 0.0069734756834805012, 0.015149264596402645, 0.0077093057334423065, 0.0052231620065867901, 0.0074239424429833889, 0.0034405686892569065, 0.0092116445302963257, 0.0064191389828920364, 0.0061260778456926346, 0.004428099375218153, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 834, 12230, -5531, 7305, 3869, 4732, 3106, 8874, 17668, 5505, -3432, 532, 360, 2985, 1444, -5, 41, 5100, 22073, 335, 1477, 8172, 1770, 2648, 7879, 6195, 1656, 3811, 2106, 3745, -1924, 4186, 1149, 9187, 5245, 2478, 54504, 11301, 4783, 10880, 1131, 424, 4330, -96, 3667, 1445, 2922, 344, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00032208536867983639, 8.0406141933053732e-05, 0.00013894076982978731, 0.00010903230577241629, 0.00017679283337201923, 0.000169186299899593, 0.00015632410941179842, 0.00010459177428856492, 6.1477730923797935e-05, 0.00013209163444116712, 0.0001410867553204298, 0.00019143550889566541, 0.00019267055904492736, 0.00018794130301102996, 0.00019910064293071628, 0.00016780254372861236, 0.00025647936854511499, 0.00015540012100245804, 5.048813545727171e-05, 0.00023299592430703342, 0.00024428984033875167, 9.562414197716862e-05, 0.00024687711265869439, 0.00015948807413224131, 0.00010997083882102743, 0.00013569318980444223, 0.00020545546431094408, 0.00016940053319558501, 0.00012911997328046709, 0.00018018108676187694, 0.00027842610143125057, 0.00016297449474222958, 0.00023192960361484438, 9.582145867170766e-05, 0.00012361044355202466, 0.0002210235979873687, 2.9283768526511267e-05, 9.2713045887649059e-05, 0.00012970826355740428, 9.2081318143755198e-05, 0.00020835819304920733, 0.00024470721837133169, 0.00015557871665805578, 0.00018347885634284467, 0.00018563561025075614, 0.00018918640853371471, 0.0001543369289720431, 0.00017967917665373534, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -93,-127,-20,35,-60,-12,53,-53, 
  /* [1][0][][] */ 3,127,42,-87,-18,-97,-61,117, 
  /* [2][0][][] */ -127,-40,56,52,117,16,69,-61, 
  /* [3][0][][] */ -13,-50,-127,-49,2,-72,-24,69, 
  /* [4][0][][] */ -56,-73,71,-20,127,-75,61,-9, 
  /* [5][0][][] */ -33,44,43,-56,27,-16,-30,127, 
  /* [6][0][][] */ -121,127,62,62,-72,-7,45,-123, 
  /* [7][0][][] */ 70,-3,81,57,24,-95,-4,127, 
  /* [8][0][][] */ -15,65,4,-30,19,112,127,-60, 
  /* [9][0][][] */ 51,111,5,-80,-58,-95,-46,127, 
  /* [10][0][][] */ -8,-39,63,-28,-47,14,-127,-78, 
  /* [11][0][][] */ -39,23,-127,-33,104,-15,24,63, 
  /* [12][0][][] */ 94,35,-32,-8,127,122,14,-10, 
  /* [13][0][][] */ -120,-127,-8,60,-114,63,76,12, 
  /* [14][0][][] */ 6,60,-76,127,-91,30,29,37, 
  /* [15][0][][] */ -10,-79,-32,-59,127,87,-55,93, 
  /* [16][0][][] */ 86,-127,-23,33,17,-25,18,-117, 
  /* [17][0][][] */ -126,-98,-127,101,-13,109,92,-86, 
  /* [18][0][][] */ 52,-8,127,-2,-62,-81,-64,-3, 
  /* [19][0][][] */ 18,123,-26,20,61,-127,-31,-4, 
  /* [20][0][][] */ -44,40,-127,-15,52,-15,2,-53, 
  /* [21][0][][] */ -55,-18,69,68,-127,-107,74,-47, 
  /* [22][0][][] */ 68,-34,-127,-29,-23,-6,6,38, 
  /* [23][0][][] */ -67,94,127,-24,-113,4,10,-63, 
  /* [24][0][][] */ -108,127,105,10,79,71,-5,0, 
  /* [25][0][][] */ -70,-127,-63,32,-104,32,119,-44, 
  /* [26][0][][] */ 74,75,-52,-38,-127,-34,-41,63, 
  /* [27][0][][] */ 51,24,-41,35,-127,10,16,2, 
  /* [28][0][][] */ -47,18,11,-127,89,65,-59,-111, 
  /* [29][0][][] */ 28,10,-40,-127,-125,6,52,-20, 
  /* [30][0][][] */ -102,-9,33,127,47,19,-27,-4, 
  /* [31][0][][] */ -22,-61,60,-28,-127,30,-53,-58, 
  /* [32][0][][] */ -127,3,15,-23,-9,-54,29,56, 
  /* [33][0][][] */ 13,-67,-127,-73,22,34,-80,-3, 
  /* [34][0][][] */ 45,127,126,-15,-59,-68,52,-27, 
  /* [35][0][][] */ 68,54,36,10,-94,-45,-127,-40, 
  /* [36][0][][] */ 127,11,59,-49,27,-33,108,40, 
  /* [37][0][][] */ 67,97,0,16,64,10,-127,59, 
  /* [38][0][][] */ -1,55,65,127,-63,60,64,-87, 
  /* [39][0][][] */ 4,46,127,-45,54,-44,-32,45, 
  /* [40][0][][] */ 71,18,20,53,-52,-127,5,-106, 
  /* [41][0][][] */ 28,-66,7,127,-32,85,2,102, 
  /* [42][0][][] */ -53,-114,53,-69,127,-29,80,40, 
  /* [43][0][][] */ -35,-64,-70,-80,127,33,-12,58, 
  /* [44][0][][] */ 76,-8,127,4,-8,32,-13,19, 
  /* [45][0][][] */ -14,-35,6,-20,-59,-84,-36,127, 
  /* [46][0][][] */ 9,97,39,73,-10,-25,55,-127, 
  /* [47][0][][] */ 50,61,57,48,-127,39,66,105, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0057870582677423954, 0.0014446947025135159, 0.0024964138865470886, 0.0019590344745665789, 0.0031765194144099951, 0.0030398494563996792, 0.0028087482787668705, 0.0018792493501678109, 0.0011045990977436304, 0.0023733521811664104, 0.002534971572458744, 0.0034396112896502018, 0.0034618019126355648, 0.0033768292050808668, 0.0035773343406617641, 0.0030149866361171007, 0.0046082846820354462, 0.002792146522551775, 0.00090714392717927694, 0.0041863466612994671, 0.0043892697431147099, 0.0017181236762553453, 0.0044357562437653542, 0.0028655969072133303, 0.001975897466763854, 0.0024380630347877741, 0.0036915144883096218, 0.003043698612600565, 0.0023199589923024178, 0.003237397875636816, 0.0050026117824018002, 0.0029282388277351856, 0.0041671874932944775, 0.0017216689884662628, 0.0022209666203707457, 0.0039712344296276569, 0.00052615517051890492, 0.001665818621404469, 0.0023305290378630161, 0.0016544681275263429, 0.0037436690181493759, 0.004396769218146801, 0.0027953556273132563, 0.003296650480479002, 0.0033354018814861774, 0.0033992007374763489, 0.0027730436995625496, 0.0032283798791468143, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 6146, -1512, 7845, -6355, -16874, -9830, -6514, -1798, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 8.5342471720650792e-05, 9.8055315902456641e-05, 0.00011337659088894725, 0.00013715874229092151, 0.00012438511475920677, 7.8349454270210117e-05, 0.00015043720486573875, 0.00015401247947011143, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -6,-34,33,-63,42,55,64,74,65,-28,-19,41,-21,-15,9,-15,22,31,-8,-40,-22,13,-77,-28,25,-9,17,-52,-38,20,39,19,23,43,49,18,75,-47,-58,11,-48,-61,-13,0,-55,-58,-127,45, 
  /* [1][0][][] */ -29,-3,-44,41,-4,20,-39,-17,-65,28,17,81,-30,-2,-28,127,39,58,22,-18,-45,-28,-53,13,13,-9,-21,-76,30,-16,-52,-51,55,-17,-35,-32,47,34,34,-42,1,52,44,-40,10,-27,-64,-26, 
  /* [2][0][][] */ -10,-58,-40,14,-32,20,20,13,99,7,-13,-14,-39,-77,38,17,5,-54,-30,-8,-91,49,5,18,5,56,-17,-24,-47,-32,31,-38,-84,45,-46,72,-70,70,-19,0,127,-7,16,40,22,53,-58,-39, 
  /* [3][0][][] */ -21,-100,94,42,21,-89,-24,-4,-127,119,62,-37,27,-11,-16,31,45,40,-20,29,47,68,50,-24,-1,75,58,14,-28,-55,7,18,-24,0,44,21,-14,-66,-29,48,-24,-7,22,-61,-75,30,-28,36, 
  /* [4][0][][] */ 2,75,-15,108,37,6,9,-5,-49,65,58,83,25,43,75,13,20,-105,-4,-16,88,-12,-118,57,72,-33,46,60,68,25,-1,-58,-43,127,20,5,51,-19,32,33,-9,42,8,-27,-5,-52,-18,21, 
  /* [5][0][][] */ -20,2,3,-58,-127,35,109,20,10,38,-27,-21,-98,6,62,-56,-73,32,-31,-64,18,103,-20,38,95,43,0,30,-23,-53,92,-71,-32,84,85,77,-52,43,86,20,-11,-24,-24,40,-73,39,23,69, 
  /* [6][0][][] */ -11,-18,5,17,-65,-42,21,1,15,-4,29,9,-56,-30,30,65,-3,-40,-14,-64,61,-23,11,-14,13,-8,-4,23,37,22,27,127,46,-9,-11,11,25,-16,15,5,-4,27,-29,-39,-14,-32,-17,38, 
  /* [7][0][][] */ -28,-23,-45,-11,10,-22,2,9,47,11,18,-3,-9,10,3,-5,31,-8,7,-3,-60,-2,20,-19,-6,-11,-64,-14,-14,-17,12,33,16,-7,27,12,-29,127,-15,-39,-46,-12,-42,-36,31,64,-71,-12, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0036270550917834044, 0.0041673509404063225, 0.0048185051418840885, 0.0058292467147111893, 0.0052863671444356441, 0.0033298516646027565, 0.0063935811631381512, 0.006545530166476965, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -1476, 33798, 27800, -588, -1379, -9381, 13608, 13888, -14007, 3038, -1148, 14245, 18687, -18902, -8391, -1342, 1511, 29707, -1165, 1952, 52821, 5567, -7978, -4742, 15144, 12419, -2201, -880, -2391, 939, 28710, 4849, -5633, 6393, 11634, 6043, -3972, 46383, -6077, 1054, 28903, 751, -2097, 11226, 733, 201, 5986, 12406, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00020531781774479896, 8.7587977759540081e-05, 0.00010113840107806027, 0.00010207823652308434, 6.3199244323186576e-05, 6.4279745856765658e-05, 0.00013997334463056177, 7.8147473686840385e-05, 0.0002150821965187788, 4.5014221541350707e-05, 0.00014094084326643497, 7.2668437496758997e-05, 9.3060363724362105e-05, 0.00017000781372189522, 8.4970321040600538e-05, 5.6800421589286998e-05, 6.6730739490594715e-05, 8.4492843598127365e-05, 0.00014625351468566805, 3.7673675251426175e-05, 4.5537228288594633e-05, 0.00013298164412844926, 6.2806226196698844e-05, 0.0001493767776992172, 7.8579330875072628e-05, 0.00013786570343654603, 0.0001077288034139201, 0.00013934727758169174, 0.00018186056695412844, 0.00018608408572617918, 9.490601223660633e-05, 5.4048738093115389e-05, 4.8045152652775869e-05, 8.8516018877271563e-05, 0.00010544252290856093, 0.00013165806012693793, 8.089555922197178e-05, 0.00010806221689563245, 7.6580734457820654e-05, 6.5147338318638504e-05, 0.00010006714728660882, 0.00034825148759409785, 7.6757423812523484e-05, 8.8029453763738275e-05, 0.00017843722889665514, 0.00020611874060705304, 0.00030072481604292989, 0.00012640839850064367, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 50,-34,-127,29,99,69,-52,-71,21,110,92,-68,-77,111,127,102,41,-109,23,59,-101,-127,72,82,-44,-45,125,127,91,127,-41,85,86,-58,-127,-46,63,-94,78,33,-113,18,72,-36,100,60,15,-87, 127,-105,-87,3,92,83,-18,-56,43,68,56,-127,-92,73,119,109,54,-116,33,118,-97,-67,63,52,-41,-31,127,72,70,99,-31,103,79,-18,-34,-13,54,-59,117,92,-63,43,31,-79,127,73,43,-78, 102,-66,-40,9,86,15,6,-31,14,19,-23,-85,-127,54,78,5,-5,-37,26,55,-46,-54,77,22,-42,13,89,35,49,124,-16,52,49,-108,-87,63,58,-27,30,68,-37,-4,-1,5,111,10,-19,-30, 
  /* [0][1][][] */ -6,-55,-63,77,127,113,-127,-78,127,123,118,-87,-58,127,94,127,127,-82,63,127,-127,-20,122,127,-127,-121,106,73,127,18,-127,110,110,-127,-107,-127,50,-127,115,75,-127,69,127,-127,79,127,-1,-69, 23,-124,-91,113,80,127,-69,-127,126,127,127,-83,-78,113,84,110,103,-127,61,113,-102,-49,127,61,-124,-127,113,119,107,20,-113,127,127,-85,-48,-28,127,-120,127,79,-81,127,92,-1,62,92,26,-127, 20,-71,-92,41,95,42,-37,-84,33,49,105,-35,-70,32,78,61,69,-47,-3,66,-72,15,99,-4,-61,-37,57,29,40,-123,-38,40,66,-101,-87,-1,25,-49,38,45,-12,75,-34,25,65,67,-19,-72, 
  /* [0][2][][] */ -14,-127,-59,79,73,46,-54,62,-91,99,106,-52,-9,63,62,118,58,19,-125,0,-65,-11,117,46,-75,-13,62,2,5,16,-64,48,43,-47,-58,-83,55,-56,41,59,-120,26,92,-124,53,28,-108,-44, 10,-115,-60,127,71,56,-43,49,-68,76,100,-34,-86,60,47,114,65,2,-127,62,-59,-103,105,13,-65,19,20,15,55,53,-74,56,86,-39,40,-59,64,-53,70,127,-39,56,47,-111,93,-20,-127,-20, 15,-50,-106,87,78,23,-4,-4,-77,-19,86,-61,-53,51,30,66,60,22,-67,-14,-26,30,59,-9,-64,10,16,13,-7,-33,-15,46,63,-13,-75,43,43,-11,58,36,-17,24,-10,-39,25,-25,-27,-67, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.008726007305085659, 0.0037224891129881144, 0.0042983819730579853, 0.0043383250012993813, 0.0026859678328037262, 0.0027318890206515789, 0.0059488671831786633, 0.0033212676644325256, 0.0091409934684634209, 0.0019131043227389455, 0.0059899860061705112, 0.0030884083826094866, 0.0039550652727484703, 0.0072253318503499031, 0.0036112386733293533, 0.002414017915725708, 0.0028360562864691019, 0.003590945852920413, 0.0062157739885151386, 0.0016011311672627926, 0.0019353321986272931, 0.005651719868183136, 0.0026692645624279976, 0.0063485130667686462, 0.0033396214712411165, 0.0058592921122908592, 0.0045784739777445793, 0.005922259297221899, 0.0077290739864110947, 0.0079085733741521835, 0.0040335054509341717, 0.0022970712743699551, 0.0020419189240783453, 0.0037619308568537235, 0.0044813072308897972, 0.0055954675190150738, 0.003438061336055398, 0.0045926440507173538, 0.0032546811271458864, 0.0027687619440257549, 0.0042528538033366203, 0.014800687320530415, 0.003262190381065011, 0.0037412517704069614, 0.0075835823081433773, 0.0087600462138652802, 0.012780804187059402, 0.0053723570890724659, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -1652, 4878, 3841, -1283, -67, 7687, 2851, 1110, 8113, 2241, -2444, 929, 2848, 1825, -1124, 333, -1352, 4804, -1279, 223, 1548, 1696, -489, -268, 123, 4921, -1519, -1047, -1858, -2214, 9365, 1650, 1702, 492, 1290, 471, 1616, 17861, 1168, 199, 6088, -3136, 636, 289, -1816, -2817, 59630, 1365, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00034040657919831574, 0.00017435473273508251, 0.00018760957755148411, 0.00023865663388278335, 0.00057038164231926203, 9.9265140306670219e-05, 0.00025429142988286912, 0.00024598024901933968, 0.00012255126785021275, 0.00027433986542746425, 0.00021732322056777775, 0.00037729681935161352, 0.00023779677576385438, 0.00025420152815058827, 0.00025248987367376685, 0.00029760113102383912, 0.00028387160273268819, 0.00016735223471187055, 0.00023076022625900805, 0.00039798286161385477, 0.00026360934134572744, 0.00020249161752872169, 0.00029496481874957681, 0.000308342365315184, 0.00035385030787438154, 0.00015365317813120782, 0.00026795637677423656, 0.00028262875275686383, 0.00021894632664043456, 0.00017664810002315789, 0.00011240504682064056, 0.00033216612064279616, 0.00029056001221761107, 0.00036712680594064295, 0.00021728719002567232, 0.00036711903521791101, 0.00019499857444316149, 6.1367369198706001e-05, 0.00041019314085133374, 0.00022202229592949152, 0.00015158929454628378, 0.00012056824198225513, 0.00033311382867395878, 0.00041473234887234867, 0.00033736327895894647, 0.00021100226149428636, 2.0531564587145112e-05, 0.00023342690838035196, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 46,23,-30,18,-15,19,-127,5, 
  /* [1][0][][] */ -9,-26,-127,12,6,0,111,-92, 
  /* [2][0][][] */ -127,-58,-80,-64,-47,60,-114,-8, 
  /* [3][0][][] */ -18,-85,17,-45,-30,-127,-112,-35, 
  /* [4][0][][] */ -38,-127,-40,38,57,19,-28,-46, 
  /* [5][0][][] */ 85,2,82,66,-122,51,-110,-127, 
  /* [6][0][][] */ 59,-127,-69,-66,-18,85,-50,-90, 
  /* [7][0][][] */ -46,-83,-42,-127,91,-96,-11,21, 
  /* [8][0][][] */ 27,53,19,39,18,-41,-26,127, 
  /* [9][0][][] */ -30,-52,-72,15,45,-10,127,-3, 
  /* [10][0][][] */ -29,-1,-99,32,17,-1,127,-93, 
  /* [11][0][][] */ 12,-33,-51,27,-127,7,26,36, 
  /* [12][0][][] */ 127,52,3,32,-53,99,48,12, 
  /* [13][0][][] */ -64,-15,1,-23,43,-127,1,67, 
  /* [14][0][][] */ -71,-23,-4,76,25,77,-127,-121, 
  /* [15][0][][] */ 35,58,49,-27,-127,37,123,-34, 
  /* [16][0][][] */ -28,-78,21,70,-13,-65,20,-127, 
  /* [17][0][][] */ -69,127,42,4,-60,-55,-100,-76, 
  /* [18][0][][] */ 127,100,-73,-100,39,88,-71,-116, 
  /* [19][0][][] */ -27,66,-22,2,-127,3,-73,-83, 
  /* [20][0][][] */ -127,-6,-27,-4,17,15,91,68, 
  /* [21][0][][] */ -77,-31,6,2,-127,-91,-96,40, 
  /* [22][0][][] */ 5,-24,-84,-3,-127,5,3,87, 
  /* [23][0][][] */ 60,8,-8,20,127,59,-81,81, 
  /* [24][0][][] */ 100,-24,-84,12,-127,-3,38,36, 
  /* [25][0][][] */ 88,-50,127,51,-10,-112,-1,101, 
  /* [26][0][][] */ 45,127,-15,79,83,-37,19,-23, 
  /* [27][0][][] */ -127,73,50,-10,83,-38,10,94, 
  /* [28][0][][] */ -81,-85,-56,-35,57,-127,30,-15, 
  /* [29][0][][] */ -38,-33,65,50,127,-98,-117,89, 
  /* [30][0][][] */ 103,19,-100,-127,-90,-102,-43,-67, 
  /* [31][0][][] */ 10,-10,44,56,-127,11,57,18, 
  /* [32][0][][] */ 107,7,59,49,-52,-48,127,62, 
  /* [33][0][][] */ 52,8,-28,5,-127,-76,13,55, 
  /* [34][0][][] */ 42,-8,-11,-1,-41,127,44,-64, 
  /* [35][0][][] */ 127,26,0,-49,54,-85,33,122, 
  /* [36][0][][] */ -60,-60,92,-127,-39,-13,115,-113, 
  /* [37][0][][] */ 83,-65,67,58,123,0,44,-127, 
  /* [38][0][][] */ 78,127,12,-26,-12,37,27,55, 
  /* [39][0][][] */ 64,-3,-63,110,11,-106,-121,127, 
  /* [40][0][][] */ -5,-35,11,-38,21,-127,18,49, 
  /* [41][0][][] */ -35,47,-106,-60,53,127,83,-80, 
  /* [42][0][][] */ 5,-25,-37,5,44,127,26,44, 
  /* [43][0][][] */ -8,22,-10,7,-127,-78,28,-21, 
  /* [44][0][][] */ -127,-48,-15,-47,22,39,-68,-44, 
  /* [45][0][][] */ -54,29,-72,-3,-11,4,-57,127, 
  /* [46][0][][] */ -53,57,127,-43,-99,-72,-26,38, 
  /* [47][0][][] */ -126,-127,-40,-5,93,114,-77,122, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0032695268746465445, 0.0016746370820328593, 0.0018019467825070024, 0.0022922421339899302, 0.0054783844389021397, 0.00095341884298250079, 0.0024424106813967228, 0.002362583763897419, 0.0011770767159759998, 0.0026349711697548628, 0.0020873395260423422, 0.0036238492466509342, 0.0022839833982288837, 0.0024415473453700542, 0.0024251071736216545, 0.0028583903331309557, 0.0027265215758234262, 0.0016073797596618533, 0.002216398948803544, 0.0038225338794291019, 0.0025319070555269718, 0.001944885472767055, 0.0028330693021416664, 0.0029615575913339853, 0.0033986507914960384, 0.0014758034376427531, 0.002573659410700202, 0.0027145841158926487, 0.0021029291674494743, 0.0016966643743216991, 0.0010796246351674199, 0.003190379124134779, 0.0027907621115446091, 0.0035261684097349644, 0.0020869935397058725, 0.0035260939039289951, 0.0018729164730757475, 0.00058941944735124707, 0.0039398106746375561, 0.0021324730478227139, 0.0014559802366420627, 0.0011580302380025387, 0.003199481638148427, 0.0039834086783230305, 0.0032402966171503067, 0.0020266282372176647, 0.00019720096315722913, 0.0022420117165893316, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10227, 14416, -1187, 7689, 588, -11474, 7868, -2975, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00011471896141301841, 8.2742924860212952e-05, 0.00016486168897245079, 0.0001941327063832432, 0.00010851237311726436, 0.00011239410378038883, 9.6705261967144907e-05, 0.00010401867621112615, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 29,-26,108,85,45,-37,1,9,-14,70,-36,19,-47,-70,38,0,-124,57,-42,65,-56,72,-4,-1,-10,-50,73,-30,-16,16,-49,108,-48,7,-58,-85,-61,-23,-57,-16,-4,36,-127,5,38,17,24,54, 
  /* [1][0][][] */ -70,-13,89,27,-30,42,-66,-32,55,-5,-20,-42,-13,22,1,22,-6,38,29,-19,-86,-29,-69,-50,45,-46,2,-35,46,-66,-18,-127,-5,-65,-87,-92,-75,-103,-28,24,64,-35,116,-110,-41,-16,-38,5, 
  /* [2][0][][] */ -45,114,9,39,9,18,9,-42,77,-43,74,73,127,6,21,-49,90,-1,-10,22,-20,43,27,90,-88,-30,14,-20,-6,62,-24,-84,-21,-7,1,-63,-23,11,-31,-22,76,-82,50,0,46,-112,7,-22, 
  /* [3][0][][] */ 33,-10,-56,40,66,-79,-12,-112,-51,0,-87,-85,-54,118,-22,-10,-63,-7,-82,-53,14,72,-6,-22,127,20,68,-83,16,-79,58,-60,64,78,94,-101,-54,10,-17,38,-2,26,-72,31,-19,20,-6,35, 
  /* [4][0][][] */ -47,41,-36,83,75,-31,37,-42,-18,-8,-47,33,-36,-9,15,-52,24,64,-37,-37,-41,34,-65,-85,40,-9,34,-41,21,-27,-51,52,-5,62,-41,-74,-76,-62,-24,3,63,-40,127,18,27,80,-27,-48, 
  /* [5][0][][] */ 64,-3,118,-14,-7,20,42,49,127,-21,84,-34,45,97,41,-63,-6,38,39,-54,-70,-97,6,66,23,-21,54,49,-68,-43,7,-32,-46,49,-45,66,42,-8,-48,-67,-28,59,26,49,-25,-14,88,13, 
  /* [6][0][][] */ 1,-82,-13,3,47,21,-23,19,-74,-13,56,62,78,53,-54,29,72,-117,-4,-13,-13,-55,-92,36,-73,75,-49,1,10,-64,57,-55,91,25,-99,-12,-21,15,24,3,54,-106,0,-58,-127,23,-49,7, 
  /* [7][0][][] */ -21,-36,-69,-50,29,118,8,-19,-18,-47,-126,-127,29,51,-81,-60,-42,18,118,0,-4,-64,64,11,81,-39,-69,94,-15,-20,-13,-72,-66,72,49,103,113,-55,-18,-29,-60,-4,28,-15,-44,-26,9,-71, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0048755556344985962, 0.0035165741574019194, 0.0070066219195723534, 0.0082506397739052773, 0.0046117757447063923, 0.0047767492942512035, 0.0041099735535681248, 0.0044207936152815819, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1643, 1223, 293, -200, 2935, 8124, 189, -3018, -9005, -77, -11859, -679, -4293, -2699, -1702, -263, -12089, 18588, -1177, -1717, -262, -1521, -1801, -3213, 18013, 369, 8, -975, 2725, -1963, 876, -8080, 2071, 140, -2356, 10564, 74, -1028, 262, -586, -2748, -557, 1405, 7901, 1866, 11028, 1453, -2307, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030565453926101327, 0.00016010219405870885, 0.00053778610890731215, 0.00025491815176792443, 0.00013699912233278155, 0.00021547303185798228, 0.00014494390052277595, 0.00019375745614524931, 0.0002442931872792542, 0.00015943931066431105, 0.0003035292902495712, 0.0002121452271239832, 0.00012654300371650606, 0.00016511719150003046, 0.00014002340321894735, 0.0003176906902808696, 0.00019455362053122371, 6.4246378315147012e-05, 0.00031116144964471459, 0.00044313297257758677, 0.00025197304785251617, 0.00028008135268464684, 0.00016110627620946616, 0.00061015354003757238, 0.00023494235938414931, 0.00035556135117076337, 0.0002119615237461403, 0.00015863821317907423, 0.00017130360356532037, 0.00016970168508123606, 0.00039867093437351286, 0.00059517810586839914, 0.00044670319766737521, 0.00014933448983356357, 0.00039223543717525899, 0.00013953105371911079, 0.00018276594346389174, 0.00010520002251723781, 0.00034111461718566716, 0.00078819034388288856, 0.00023845743271522224, 0.00073453143704682589, 0.00064816820668056607, 0.00011733780411304906, 0.00023848787532187998, 7.6803997217211872e-05, 0.00017006145208142698, 0.00026800524210557342, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -8,-37,36,-6,127,-15,-13,-15,-2,48,23,24,40,-6,127,-37,30,-51,4,3,-20,-18,-100,39,-117,55,48,-75,-32,18,-22,-8,-55,4,40,5,75,120,27,0,84,22,-8,-19,-94,-24,-71,-39, -4,-85,-78,-28,-41,-12,32,14,26,-18,66,127,-7,25,-60,127,8,-54,5,-42,-69,-127,-107,91,-127,-86,3,62,10,48,106,-3,-127,-75,-24,36,127,-127,122,27,66,-12,-12,-14,-83,-14,86,-1, 20,-28,-15,127,24,5,-112,-24,-13,-38,-5,7,62,12,-70,-37,14,-16,-34,-6,0,-3,-14,21,-35,-68,-58,68,2,61,-100,0,0,127,35,5,15,92,-104,12,30,-4,-2,42,-127,-16,-56,47, 
  /* [0][1][][] */ -107,-48,127,19,-44,-37,90,11,51,97,34,18,47,-4,103,29,50,-127,127,46,91,5,71,-25,-14,-12,47,-79,27,58,30,48,20,-96,7,127,-6,12,-39,-104,10,100,-20,-100,46,-104,-84,9, 127,-43,-82,-51,-25,-127,127,127,127,7,127,-36,-127,-26,-45,-44,127,-78,117,127,127,97,127,-127,-12,-27,79,7,127,127,-127,127,29,-33,127,-89,-62,91,-92,117,-127,-127,127,-127,83,-127,127,-103, -15,-86,10,72,-48,-4,-75,-18,-4,-127,-20,37,95,8,-84,52,14,-15,-29,23,-31,-16,46,-19,15,9,-127,122,-100,13,55,24,-9,-19,-17,-49,45,14,127,14,41,54,-39,0,49,-73,-63,127, 
  /* [0][2][][] */ -3,127,37,-22,48,21,-23,-7,-8,24,15,16,66,28,124,-5,20,-27,12,-41,-16,23,20,26,-26,-27,48,-29,-87,-105,-18,4,-12,43,-20,37,-60,17,-19,86,-13,16,-5,-34,23,-11,-10,-20, 13,93,-36,22,-9,-36,7,52,32,0,26,-15,42,127,-40,-89,22,-18,90,-78,-54,86,-3,59,64,127,-2,127,-110,-111,4,-3,74,-67,-75,-4,-59,-69,-46,-127,39,-28,-52,45,31,21,11,10, 15,103,-10,34,5,10,-73,-11,-22,-20,0,1,62,21,-74,-13,-2,-7,-66,-21,-30,21,-8,15,-19,22,-37,39,29,-68,41,3,21,87,3,-25,-33,42,3,-17,-34,-12,7,-34,14,-7,3,38, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012990317307412624, 0.0068043433129787445, 0.022855909541249275, 0.010834021493792534, 0.0058224624954164028, 0.0091576036065816879, 0.0061601158231496811, 0.0082346918061375618, 0.010382460430264473, 0.006776170339435339, 0.012899994850158691, 0.0090161720290780067, 0.0053780772723257542, 0.0070174802094697952, 0.005950994323939085, 0.013501853682100773, 0.0082685286179184914, 0.0027304710820317268, 0.013224361464381218, 0.018833151087164879, 0.010708854533731937, 0.011903457343578339, 0.0068470165133476257, 0.025931525975465775, 0.0099850501865148544, 0.015111356973648071, 0.0090083647519350052, 0.0067421239800751209, 0.0072804032824933529, 0.0072123217396438122, 0.016943514347076416, 0.025295069441199303, 0.018984885886311531, 0.0063467156141996384, 0.016670005396008492, 0.0059300693683326244, 0.0077675525099039078, 0.004471000749617815, 0.014497371390461922, 0.033498089760541916, 0.010134440846741199, 0.031217584386467934, 0.027547147125005722, 0.0049868565984070301, 0.01013573445379734, 0.0032641696743667126, 0.0072276117280125618, 0.011390223167836666, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 5051, 1397, 16352, -1972, -751, 4034, -329, 940, 2438, 1, 7433, 185, 2362, 3680, 1751, 3963, 2537, 2341, -1888, 3371, 1850, 700, 808, 19764, 20379, 9762, 3351, -2033, -15, 6526, 4833, 10006, 8582, 2832, 5658, -464, 371, 2684, 5475, 5040, 1326, 13465, 9611, 3976, 4217, 1160, 2371, 705, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00017963498248718679, 0.00032278994331136346, 7.1212671173270792e-05, 0.0003181596111971885, 0.00042854304774664342, 0.00022028754756320268, 0.00032148632453754544, 0.00048942695138975978, 0.00024367375590372831, 0.00039526744512841105, 0.00012402395077515393, 0.00046192092122510076, 0.00020542771380860358, 0.00020329206017777324, 0.00025252005434595048, 0.00022578320931643248, 0.00019138724019285291, 0.00021707994164898992, 0.00029253939283080399, 0.0002533391525503248, 0.00026546523440629244, 0.00034640717785805464, 0.00029284556512720883, 5.5023072491167113e-05, 7.7854354458395392e-05, 9.8502794571686536e-05, 0.00026794301811605692, 0.0002426928112981841, 0.00056596955982968211, 0.00013489954289980233, 0.0001736336707836017, 0.00010321985610062256, 0.00011215973063372076, 0.00025321630528196692, 0.00015921032172627747, 0.00034612006857059896, 0.00044754863483831286, 0.00020944028801750392, 0.0001695466780802235, 0.00020389330165926367, 0.00029231165535748005, 8.0168050772044808e-05, 0.00011841407103929669, 0.00020522759587038308, 0.00021036120597273111, 0.00038669127388857305, 0.00029191697831265628, 0.0003333073400426656, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 2,33,15,-113,-127,27,35,91, 
  /* [1][0][][] */ 92,0,-26,-39,-41,52,127,-2, 
  /* [2][0][][] */ 14,106,-14,-36,-58,119,-50,-127, 
  /* [3][0][][] */ 58,-49,-97,127,-57,10,4,-41, 
  /* [4][0][][] */ 28,-47,68,-17,-127,6,63,56, 
  /* [5][0][][] */ -19,63,11,-78,-127,-3,-11,17, 
  /* [6][0][][] */ 84,-21,29,17,94,-23,-14,-127, 
  /* [7][0][][] */ 16,34,33,127,-2,-12,-5,9, 
  /* [8][0][][] */ 16,36,19,-52,21,127,46,-40, 
  /* [9][0][][] */ 60,21,-20,24,-52,-32,127,56, 
  /* [10][0][][] */ -9,67,-61,-31,-1,127,72,-44, 
  /* [11][0][][] */ -20,-43,-127,108,-53,53,-18,89, 
  /* [12][0][][] */ -92,-113,82,110,35,-127,-28,11, 
  /* [13][0][][] */ 35,36,23,61,-71,127,12,-43, 
  /* [14][0][][] */ -7,-127,-82,-12,-67,-98,-78,81, 
  /* [15][0][][] */ -70,28,7,1,114,42,-127,-36, 
  /* [16][0][][] */ 99,71,-81,-105,50,127,106,38, 
  /* [17][0][][] */ -126,101,-127,78,-21,-53,43,-117, 
  /* [18][0][][] */ 17,-14,-114,127,1,-16,-44,-59, 
  /* [19][0][][] */ 127,16,6,33,25,54,113,63, 
  /* [20][0][][] */ 65,-80,-65,127,27,-29,-47,-69, 
  /* [21][0][][] */ 30,49,94,-127,33,-9,15,-92, 
  /* [22][0][][] */ -80,-51,-116,19,-11,2,11,127, 
  /* [23][0][][] */ 127,54,60,4,-120,120,22,-48, 
  /* [24][0][][] */ -17,-12,-127,35,-18,28,9,35, 
  /* [25][0][][] */ 39,-101,-127,104,111,11,-28,-31, 
  /* [26][0][][] */ -71,6,127,-73,6,32,55,3, 
  /* [27][0][][] */ -104,72,127,-11,27,30,113,21, 
  /* [28][0][][] */ -51,-94,17,-127,-31,4,-3,-45, 
  /* [29][0][][] */ -89,-50,-19,85,-65,-127,-5,31, 
  /* [30][0][][] */ -127,33,54,-5,19,31,24,85, 
  /* [31][0][][] */ -51,62,78,-127,-46,16,44,49, 
  /* [32][0][][] */ -80,97,79,-76,73,71,-28,127, 
  /* [33][0][][] */ 11,127,-67,67,27,53,-127,-38, 
  /* [34][0][][] */ 89,17,76,-127,-103,-90,46,-48, 
  /* [35][0][][] */ 42,-3,9,103,59,-48,45,-127, 
  /* [36][0][][] */ 40,56,127,-58,39,-23,51,-60, 
  /* [37][0][][] */ -37,-31,92,54,-14,-127,84,-27, 
  /* [38][0][][] */ 37,43,24,-25,-37,-59,127,16, 
  /* [39][0][][] */ 31,-73,-16,6,-127,-6,58,47, 
  /* [40][0][][] */ 0,29,-127,114,-21,69,-53,74, 
  /* [41][0][][] */ -78,-15,-20,-24,127,0,-96,8, 
  /* [42][0][][] */ -107,67,-70,-48,127,36,-89,-50, 
  /* [43][0][][] */ 108,91,-34,127,-7,-105,68,91, 
  /* [44][0][][] */ 11,21,60,3,21,-127,35,-23, 
  /* [45][0][][] */ -5,-62,127,92,-25,-15,-103,25, 
  /* [46][0][][] */ 66,-113,-127,38,-72,-14,0,-22, 
  /* [47][0][][] */ -125,-64,45,10,93,14,-127,-67, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.002854381687939167, 0.0051290993578732014, 0.0011315620504319668, 0.005055523943156004, 0.0068095056340098381, 0.0035003467928618193, 0.0051083848811686039, 0.0077769448980689049, 0.0038719512522220612, 0.0062807593494653702, 0.0019707279279828072, 0.0073398766107857227, 0.0032642255537211895, 0.0032302902545779943, 0.0040125180967152119, 0.0035876722540706396, 0.0030411237385123968, 0.003449378302320838, 0.0046484209597110748, 0.0040255333296954632, 0.0042182155884802341, 0.0055043748579919338, 0.0046532861888408661, 0.00087431102292612195, 0.0012370977783575654, 0.0015651993453502655, 0.0042575872503221035, 0.0038563641719520092, 0.0089931990951299667, 0.0021435399539768696, 0.0027590214740484953, 0.001640153001062572, 0.0017822067020460963, 0.0040235812775790691, 0.002529835794121027, 0.0054998127743601799, 0.0071115023456513882, 0.0033279848285019398, 0.0026940794195979834, 0.0032398437615483999, 0.0046448023058474064, 0.0012738622026517987, 0.0018815875519067049, 0.0032610455527901649, 0.0033426182344555855, 0.0061444849707186222, 0.0046385312452912331, 0.0052962196059525013, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -12916, 4407, -16953, 8524, 1767, -601, 9613, -788, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00012128398520871997, 8.1765800132416189e-05, 7.6599797466769814e-05, 5.7046658184845001e-05, 0.00011325993546051905, 0.00010819372982950881, 0.00013257820683065802, 0.00011790233838837594, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 57,107,-32,69,-3,1,-33,5,58,-71,-2,-24,9,16,-33,-48,2,-19,32,26,-67,-27,-30,2,15,11,26,-6,14,6,-22,22,-56,1,114,-127,-24,18,-14,93,-17,24,21,-5,-20,53,35,-47, 
  /* [1][0][][] */ 25,-66,23,56,-10,-21,-25,6,67,-63,113,39,24,17,-63,-105,127,27,32,21,-85,58,52,-25,-44,-111,-45,-40,-8,-54,48,-40,-26,-34,-40,44,-12,-16,119,-83,-31,41,-84,59,75,67,11,68, 
  /* [2][0][][] */ 96,-32,-22,-3,112,113,52,79,-23,-21,-6,-29,-18,39,49,28,-24,-38,71,-50,-53,-27,-33,54,-84,-109,126,27,62,-63,-44,41,-125,88,127,21,-6,-10,2,11,13,73,18,-56,-28,31,54,-53, 
  /* [3][0][][] */ 78,-31,14,-29,106,120,20,21,-51,-16,25,39,-127,55,72,1,-14,20,59,-113,-86,15,29,100,10,-4,43,24,45,-47,-2,-21,-122,71,-77,-117,-9,-49,59,-55,82,-70,-105,-26,-55,39,-44,34, 
  /* [4][0][][] */ 44,45,-32,-42,-18,-14,-14,-7,7,-7,1,-12,-35,-9,58,50,-32,-18,-41,58,26,-4,-3,8,-70,-25,-11,48,-21,18,-23,18,-41,-20,27,-127,-15,27,10,56,6,-14,-25,-19,35,-2,84,-30, 
  /* [5][0][][] */ 54,47,-97,62,1,11,1,31,-79,-45,-46,-27,27,36,40,35,46,-80,43,127,-71,-62,-62,59,29,-29,-42,69,42,28,-73,-13,-23,-15,-62,3,-15,17,-20,68,5,76,-9,-54,122,18,25,-62, 
  /* [6][0][][] */ -20,-78,11,-30,-43,-45,-70,-75,-51,-62,-102,45,-54,-51,101,90,-127,9,28,-17,13,51,71,5,1,-12,-75,82,-77,-35,40,74,15,-49,76,46,20,37,-7,-86,-10,-58,-31,5,-36,-20,-21,54, 
  /* [7][0][][] */ 53,32,-15,36,16,19,13,-4,79,-5,-9,-8,42,-13,-6,-8,-42,-14,-30,4,12,-24,-20,-25,58,-127,21,-9,13,92,-19,30,-57,29,-53,-41,-5,26,31,49,39,55,-27,-15,-36,14,28,-15, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0051545691676437855, 0.0034750464837998152, 0.0032554913777858019, 0.0024244829546660185, 0.004813547246158123, 0.0045982333831489086, 0.0056345737539231777, 0.0050108493305742741, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 587, 12052, 1584, 4217, -1229, 75, 5287, 6847, 1940, -12189, 384, -2330, 9847, 4470, 25525, 16417, -376, 1867, -1190, 14794, 20009, 1166, -2422, 168, 6125, 1814, 3509, 20566, 5541, 9666, -745, 5125, -3215, -789, -8519, -290, -702, -39, 337, 4420, 2467, 5992, -4714, 758, -1695, -103, 8725, -1457, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.0001124653426813893, 0.00010532431042520329, 0.00052620942005887628, 5.1804167014779523e-05, 0.00050816405564546585, 0.00054090307094156742, 0.00016818138828966767, 0.00017494740313850343, 6.9748690293636173e-05, 0.00012148942187195644, 0.00043440877925604582, 0.00025558628840371966, 0.00015323878324124962, 0.00023015006445348263, 5.9007124946219847e-05, 5.4129974159877747e-05, 0.00012304272968322039, 0.00060724891955032945, 5.77452992729377e-05, 0.00010564519470790401, 5.9256839449517429e-05, 0.00071756733814254403, 0.00087298185098916292, 0.00021240193746052682, 5.0897775508929044e-05, 0.00017551545170135796, 0.0001117833235184662, 9.5758172392379493e-05, 0.00015879615966696292, 0.00013096087786834687, 0.00061612325953319669, 0.00011321959755150601, 9.7670199465937912e-05, 0.00024320065858773887, 9.9591532489284873e-05, 9.5682735263835639e-05, 0.0003063688927795738, 0.00031689339084550738, 0.00012018385314149782, 0.00017787415708880872, 8.5955769463907927e-05, 0.00017981870041694492, 0.00011412408639444038, 0.00045137762208469212, 8.5503314039669931e-05, 0.00036257930332794785, 0.00010424356150906533, 0.00060187844792380929, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -20,-95,-91,70,-85,8,-79,-63,61,112,48,-27,-33,21,-116,-65,79,-105,76,-44,-29,-118,-48,-40,112,65,4,-124,21,-13,55,64,50,73,75,39,100,114,51,5,-98,-18,13,34,-22,44,-3,-99, 86,-53,19,84,-119,42,-27,12,81,118,75,71,4,-81,-79,-78,82,-37,123,-79,-88,127,127,58,127,108,62,-120,-73,-12,-102,127,92,127,107,101,-17,59,53,-81,-114,-87,14,-29,-36,64,-8,105, 82,-20,46,88,-71,8,7,-10,17,114,-26,-29,-106,15,-25,5,37,93,77,-71,-78,-18,-76,63,79,40,10,-40,-10,-78,30,46,67,92,2,92,-8,43,95,-12,-58,-18,14,0,-14,20,-3,-10, 
  /* [0][1][][] */ 45,-127,113,81,91,-65,-127,-127,127,118,127,-28,-36,6,-127,-98,89,111,72,-77,-60,102,57,-124,122,101,111,-126,9,-106,-76,53,109,-10,77,71,36,64,127,0,25,-46,55,104,-110,99,-103,127, 127,-52,9,122,127,-127,-53,14,108,127,105,89,-58,-127,-78,-127,127,51,127,-127,-127,-122,-76,45,72,127,119,-127,-127,-103,127,96,127,-29,127,127,-11,127,95,-127,11,-127,107,-73,-127,127,-118,-122, 41,-1,-127,127,89,-59,13,-28,14,92,33,-17,-127,2,-42,-41,47,-127,88,-83,-68,19,71,67,52,62,-11,-48,-9,-127,-44,7,38,-29,56,111,-1,9,73,-6,0,5,12,-18,-62,95,-84,27, 
  /* [0][2][][] */ 79,-106,10,-8,1,67,-87,-85,33,39,43,78,-14,7,-105,-72,43,-65,11,-102,-20,-3,14,-127,14,41,83,-37,23,-21,39,41,79,-108,66,27,-127,-62,47,-6,54,-39,104,-127,-69,43,-64,0, 56,-24,6,16,9,82,-16,12,49,8,-25,-127,-27,-73,-99,-49,37,-23,59,-105,-54,-21,-17,0,21,45,127,-44,-75,-61,-37,24,43,-81,73,24,19,33,63,-45,127,-69,127,93,-83,-18,-127,26, -46,25,-7,75,-24,32,-15,-6,21,0,-11,58,-58,-4,-35,-18,10,41,14,6,-40,-1,10,57,26,71,16,-11,23,-37,30,-20,17,-19,14,27,3,-43,34,17,70,0,24,-20,-18,10,-71,-8, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0047797770239412785, 0.004476283211261034, 0.022363899275660515, 0.0022016770672053099, 0.021596971899271011, 0.022988380864262581, 0.0071477089077234268, 0.0074352645315229893, 0.0029643191955983639, 0.0051633003167808056, 0.018462372943758965, 0.010862416587769985, 0.0065126484259963036, 0.0097813773900270462, 0.0025078027974814177, 0.0023005239199846983, 0.0052293161861598492, 0.025808079168200493, 0.0024541751481592655, 0.0044899205677211285, 0.0025184156838804483, 0.030496610328555107, 0.037101726979017258, 0.0090270824730396271, 0.0021631554700434208, 0.0074594062753021717, 0.0047507910057902336, 0.0040697222575545311, 0.006748836487531662, 0.005565837025642395, 0.026185236871242523, 0.0048118326812982559, 0.0041509834118187428, 0.010336027480661869, 0.0042326399125158787, 0.0040665161795914173, 0.013020677492022514, 0.013467968441545963, 0.0051078135147690773, 0.0075596515089273453, 0.0036531200166791677, 0.0076422947458922863, 0.0048502734862267971, 0.019183548167347908, 0.0036338907666504383, 0.015409619547426701, 0.0044303513132035732, 0.025579832494258881, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 11140, 4175, 9510, 3396, 4232, 3790, -3944, 3844, 2466, -2352, -3644, 192, -1956, -5802, 10311, 1818, -1892, 2994, -1551, 2484, 474, 5632, -1754, -2455, -2490, -6013, 2626, -1352, 3469, 8153, 436, -356, 6921, 11220, 9198, 2879, 4796, -4753, 668, 4387, -1833, -4761, 4779, 3624, 724, -6735, -10346, 2619, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00043302791891619563, 0.00067500903969630599, 0.00010400959581602365, 0.00080108706606552005, 0.00042058780672959983, 0.00051182933384552598, 0.0021089969668537378, 0.0011399106588214636, 0.0010511981090530753, 0.00065089936833828688, 0.00015014340169727802, 0.00055763509590178728, 0.00049853196833282709, 0.0012147744419053197, 0.00051172182429581881, 0.001828483771532774, 0.00098347326274961233, 0.00030212171259336174, 0.0011235978454351425, 0.0015781518304720521, 0.00089127611136063933, 0.00030349797452799976, 0.00022363649623002857, 0.00056788843357935548, 0.00086448813090100884, 0.00076930067734792829, 0.00083788420306518674, 0.00046439215657301247, 0.0015187776880338788, 0.00073543132748454809, 0.00024437461979687214, 0.00075460871448740363, 0.00075929210288450122, 0.00022093627194408327, 0.00036614853888750076, 0.00040681767859496176, 0.00051944400183856487, 0.0014873291365802288, 0.00050382927292957902, 0.00067085988121107221, 0.001469098380766809, 0.00066524953581392765, 0.00072963273851200938, 0.00029844013624824584, 0.0013041743077337742, 0.00054450478637591004, 0.00055543275084346533, 0.00044732692185789347, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -120,-90,30,-127,-66,-13,4,-16, 
  /* [1][0][][] */ -127,-18,118,-9,-36,39,14,13, 
  /* [2][0][][] */ 20,20,10,127,35,-19,-7,-13, 
  /* [3][0][][] */ -123,-86,-22,-12,47,127,-40,-52, 
  /* [4][0][][] */ 5,-36,-17,-2,-9,8,-127,-65, 
  /* [5][0][][] */ 5,-48,-12,1,-11,4,-127,-70, 
  /* [6][0][][] */ 127,0,10,-16,-64,20,10,-11, 
  /* [7][0][][] */ -127,-34,-31,7,105,29,8,3, 
  /* [8][0][][] */ 24,35,-11,-12,-28,-127,34,20, 
  /* [9][0][][] */ 69,16,-5,-6,-19,-3,-11,127, 
  /* [10][0][][] */ 104,-3,-84,42,-95,-35,38,127, 
  /* [11][0][][] */ -76,127,15,20,49,-50,11,14, 
  /* [12][0][][] */ 127,-57,-106,-4,60,0,-11,-19, 
  /* [13][0][][] */ 127,16,-7,-16,-22,65,4,6, 
  /* [14][0][][] */ -127,-85,102,-53,66,-47,-71,-124, 
  /* [15][0][][] */ 37,54,2,-15,-7,-127,-17,0, 
  /* [16][0][][] */ -9,-78,16,18,16,127,13,4, 
  /* [17][0][][] */ 20,-89,-56,-24,-30,127,-35,-32, 
  /* [18][0][][] */ 33,-20,-12,2,-28,24,127,-23, 
  /* [19][0][][] */ 9,21,-10,-127,-8,39,-12,7, 
  /* [20][0][][] */ -63,-35,43,13,43,85,16,-127, 
  /* [21][0][][] */ -41,-11,53,-20,-45,11,-127,-90, 
  /* [22][0][][] */ 57,-27,4,127,-18,0,43,36, 
  /* [23][0][][] */ 127,11,-95,-28,37,-35,-12,15, 
  /* [24][0][][] */ -41,57,28,57,-4,11,-127,-82, 
  /* [25][0][][] */ 127,18,-84,15,18,9,13,24, 
  /* [26][0][][] */ -1,49,-33,-127,-21,10,-5,7, 
  /* [27][0][][] */ 127,-1,-108,-38,-77,13,11,82, 
  /* [28][0][][] */ -127,-26,-28,15,62,29,7,29, 
  /* [29][0][][] */ -8,-127,-17,-124,-16,8,-16,-18, 
  /* [30][0][][] */ -25,116,127,48,41,-93,73,67, 
  /* [31][0][][] */ -64,-9,-127,52,-1,18,93,91, 
  /* [32][0][][] */ 1,-127,-3,-118,-13,25,-19,-3, 
  /* [33][0][][] */ 22,-125,-16,-127,18,23,8,-36, 
  /* [34][0][][] */ -45,-47,36,-94,36,-52,127,60, 
  /* [35][0][][] */ -127,25,36,16,-105,-11,38,72, 
  /* [36][0][][] */ -127,16,109,1,-63,32,-23,10, 
  /* [37][0][][] */ 127,9,-18,-5,-83,27,1,19, 
  /* [38][0][][] */ -78,-4,70,45,26,-31,39,127, 
  /* [39][0][][] */ -127,-17,88,-2,-70,27,-7,-2, 
  /* [40][0][][] */ -3,54,56,8,26,-27,127,75, 
  /* [41][0][][] */ 127,-7,-82,0,59,34,1,-2, 
  /* [42][0][][] */ -23,-127,35,-13,19,7,-7,-16, 
  /* [43][0][][] */ -18,78,127,-12,47,-114,38,31, 
  /* [44][0][][] */ 5,-10,-2,101,-1,-127,0,2, 
  /* [45][0][][] */ 127,-20,44,-14,-51,103,14,-8, 
  /* [46][0][][] */ -3,127,-16,102,-6,98,10,44, 
  /* [47][0][][] */ -36,52,33,-19,15,-51,127,79, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0052598882466554642, 0.0081991758197546005, 0.0012633800506591797, 0.0097306156530976295, 0.0051087811589241028, 0.0062170703895390034, 0.025617489591240883, 0.013846226036548615, 0.012768656015396118, 0.0079063214361667633, 0.0018237566109746695, 0.0067734620533883572, 0.0060555506497621536, 0.014755579642951488, 0.0062157642096281052, 0.022210162132978439, 0.011946018785238266, 0.0036698011681437492, 0.013648078776896, 0.019169438630342484, 0.010826121084392071, 0.0036865184083580971, 0.0027164597995579243, 0.0068980068899691105, 0.010500733740627766, 0.0093445144593715668, 0.010177582502365112, 0.0056408620439469814, 0.018448235467076302, 0.0089331110939383507, 0.0029683611355721951, 0.0091660544276237488, 0.0092229424044489861, 0.0026836609467864037, 0.0044475202448666096, 0.0049415184184908867, 0.0063095642253756523, 0.01806623674929142, 0.0061198952607810497, 0.0081487772986292839, 0.017844792455434799, 0.0080806296318769455, 0.0088626770302653313, 0.0036250820849090815, 0.015841498970985413, 0.0066139716655015945, 0.0067467112094163895, 0.0054335747845470905, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 4924, -4634, -802, 1536, 2187, 879, -3585, 2685, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 6.6778498876374215e-05, 0.00012586051889229566, 6.4605621446389705e-05, 4.7869492846075445e-05, 0.00013882014900445938, 0.00020889916049782187, 0.00010025433584814891, 0.00017318865866400301, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -24,-9,-76,-35,-21,24,-127,-7, 
  /* [1][0][][] */ 14,88,-2,127,-1,1,-1,-39, 
  /* [2][0][][] */ 127,7,-25,-74,-63,59,122,-64, 
  /* [3][0][][] */ 18,-127,34,-67,28,-69,46,56, 
  /* [4][0][][] */ 127,-1,-56,1,18,-1,-122,-56, 
  /* [5][0][][] */ 7,-40,6,35,4,-127,-2,9, 
  /* [6][0][][] */ 126,-25,117,1,127,-29,-2,-5, 
  /* [7][0][][] */ -127,0,-97,-6,-111,11,37,7, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0028380861040204763, 0.0053490721620619297, 0.0027457389514893293, 0.0020344534423202276, 0.0058998563326895237, 0.0088782142847776413, 0.0042608091607689857, 0.0073605179786682129, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -11748, 13836, 51, -12329, 31, -12278, 356, 228, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.0003087151562795043, 0.00035548856249079108, 0.00023184942256193608, 0.00030963544850237668, 0.00040016978164203465, 0.00035836410825140774, 0.0023108823224902153, 0.0021021990105509758, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -6,-3,21,11,0,3,8,27, 18,6,-42,127,-37,-1,-6,25, 0,3,-10,22,11,1,-7,22, 
  /* [0][1][][] */ -8,-8,127,-20,127,-3,-113,34, 127,-127,-102,4,-107,127,-16,-127, -23,-1,17,-24,18,-2,127,32, 
  /* [0][2][][] */ 4,1,2,3,13,0,15,28, 0,3,-41,-2,-27,-1,-11,-108, -7,-5,-6,4,3,-2,-7,30, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.013120394200086594, 0.015108264051377773, 0.0098536005243659019, 0.013159506022930145, 0.017007214948534966, 0.015230474062263966, 0.098212495446205139, 0.089343458414077759, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 8985, 8711, -1155, 21377, 828, 6847, 138962, 10934, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00029070509481243789, 0.00028884015046060085, 0.00018510030349716544, 0.00013058395416010171, 0.00028264150023460388, 0.00033637770684435964, 4.5698243411607109e-06, 3.4616736229509115e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 121, -1, 
  /* [0][2][][] */ -42, 46, 0, 
  /* [1][0][][] */ 58, 127, 35, 
  /* [1][1][][] */ -68, -79, -43, 
  /* [1][2][][] */ 6, -42, 6, 
  /* [2][0][][] */ 33, 29, -45, 
  /* [2][1][][] */ 54, 71, -127, 
  /* [2][2][][] */ 22, 34, -57, 
  /* [3][0][][] */ 40, 50, 19, 
  /* [3][1][][] */ 50, 72, 25, 
  /* [3][2][][] */ -82, -127, -57, 
  /* [4][0][][] */ 5, -53, 49, 
  /* [4][1][][] */ 18, -127, 114, 
  /* [4][2][][] */ 6, -36, 33, 
  /* [5][0][][] */ 2, -56, 1, 
  /* [5][1][][] */ 0, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -38, -90, -8, 
  /* [6][1][][] */ -62, -127, -1, 
  /* [6][2][][] */ -21, -36, 14, 
  /* [7][0][][] */ 29, -127, 27, 
  /* [7][1][][] */ -22, -5, -13, 
  /* [7][2][][] */ -26, 70, -14, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.074129797518253326, 0.073654234409332275, 0.047200575470924377, 0.033298905938863754, 0.072073578834533691, 0.085776306688785553, 0.0011653051478788257, 0.0088272672146558762, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.069712124764919281, } };
const TfArray<1, int> quant46_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.082326449453830719, } };
const TfArray<1, int> quant47_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,41,41,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,20,20,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.062933064997196198, } };
const TfArray<1, int> quant51_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,20,20,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10232269018888474, } };
const TfArray<1, int> quant54_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,20,20,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10411493480205536, } };
const TfArray<1, int> quant55_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,21,21,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.055656146258115768, } };
const TfArray<1, int> quant59_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023425137624144554, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.037745997309684753, } };
const TfArray<1, int> quant62_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.076088353991508484, } };
const TfArray<1, int> quant63_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.06328379362821579, } };
const TfArray<1, int> quant66_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.079211875796318054, } };
const TfArray<1, int> quant67_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023113608360290527, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,10,10,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.030910855159163475, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,10,10,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.13519854843616486, } };
const TfArray<1, int> quant70_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,10,10,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension44, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12800), (TfLiteIntArray*)&g0::tensor_dimension46, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80688), (TfLiteIntArray*)&g0::tensor_dimension48, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 80688, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80688), (TfLiteIntArray*)&g0::tensor_dimension50, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension51, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 19200), (TfLiteIntArray*)&g0::tensor_dimension52, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 19200), (TfLiteIntArray*)&g0::tensor_dimension54, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21168), (TfLiteIntArray*)&g0::tensor_dimension56, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 21168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21168), (TfLiteIntArray*)&g0::tensor_dimension58, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 11264), (TfLiteIntArray*)&g0::tensor_dimension59, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension60, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension62, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 10464), (TfLiteIntArray*)&g0::tensor_dimension63, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension64, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5600), (TfLiteIntArray*)&g0::tensor_dimension66, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension67, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension69, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension70, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
